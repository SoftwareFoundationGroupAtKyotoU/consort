\appendix

\begin{figure}
  \leavevmode
  \infrule[TE-Seq]{
    [[ Th | [] : T => G | B |-e E : T' => G' ]] \andalso
    [[ Th | G' | B |- e : T'' => G'' ]]
  }{
    [[ Th | [] : T => G | B |-e E; e : T'' => G'' ]]
  }
  \infrule[TE-Hole]{}{
    [[ Th | [] : T => G | B |-e [] : T => G ]]
  }
  \infrule[TE-Stack]{
    [[ Th | [] : T' => G' | B |-e E : T'' => G'']] \\
    [[ Th | G, x : T | B |- e : T' => G' ]] \\
    [[ x not in dom G' ]] \andalso [[ B |- T' => G' ]]
  }{
    [[ Th | [] : T => G | B |-e E[let x = [] l in e] : T'' => G'' ]]
  }

  \begin{align*}
    [[ (E; e)[e'] ]] & = [[ E[e']; e ]] \\
    [[ [][e'] ]] & = e' \\
    [[ E[let y = [] l in e][x] ]] & = [[ E[let y = x in e] ]]
  \end{align*}
\caption{Context typing and substitution}
\label{fig:context-typing}
\end{figure}

\begin{figure}
  \leavevmode
  \infrule[]{
    [[ll = Trace(Es)]] \andalso [[ Th |- D ]] \andalso \forall j \in \set{0..n-1}.\seq{\ell_j} = tail^{n-j+1}([[ll]]) \\
    [[ Cons(H, R, G) ]] \andalso
    \forall i\in\set{1..n}.[[ Th | [] : Ti => Gi | lli-1 |-e Ei-1 : Ti-1 => Gi-1 ]] \\
    [[ Th | [] : T => G' | ll |-e En : Tn => Gn ]] \\
    [[ Th | G | ll |- e : T => G' ]] \andalso [[ ll |- G ]]
  }{
    [[ |- D <H,R,Es,En[e]> ]]
  }

  \begin{align*}
    [[Trace(.) = .]] && [[Trace(E[let x = [] l in e] : Es) = l : Trace(Es)]])
  \end{align*}

  \begin{align*}
    [[Cons(H,R,G)]] = & [[SAT(H,R,G)]] \wedge [[forall a in H.F(a)]] \leq 1 \\
    [[SAT(H,R,G)]] = & [[ forall x in G.x in R /\ SATv(H,R,R(x),G(x)) ]] \\
    [[SATv(H,R,Rv,T)]] = & \begin{cases}
      [[Rv is INT /\ [R][Rv / nu]ph ]] & [[ T = {nu:int|ph} ]] \\
      [[a in H /\ SATv(H,R,H(a),T')]] & [[ T = T' ref r /\ Rv = a ]]
    \end{cases} \\
    [[ [empty]ph ]] & = [[ [v/x]ph ]] \\
    [[ [R { y |-> nn }]ph ]] & =  [[  [R][nn/y]ph ]] \\
    [[ [R { y |-> a }]ph ]] & =  [[ [R]ph ]] \\
    F = &  \Sigma_{[[ x in G ]]}\,[[own(H,R(x),G(x))]] \\
    [[own(H,v,T)]] &  = \begin{cases}
      [[ { a |-> r } + own(H,H(a),T') ]] & [[v = a /\ a in H /\ T = T' ref r ]] \\
      \emptyset & o.w.
    \end{cases} \\
  \end{align*}
\caption{Machine state typing}
\label{fig:state-typing}
\end{figure}

\section{Proof of Type Soundness(Theorem 1)}
To prove the safety of typing, we need to show that the total owership for each heap is always 1.
A triple $( [[H]],[[R]],[[G]] )$ is consistent, written as $[[Cons(H,R,G)]]$, and defined as $\ref{fig:state-typing}$.

\begin{definition}
  The valid substitution relation, written $[[R |- T ]]$ is the smallest relation closed
  under the following rules:
  \infrule[]{
    [[ forall x in FPV(ph) \ { nu }.exists nn.R(x) = nn ]]
  }{
    [[R |- {nu:int|ph}]]
  }
  \infrule[]{
    [[ R |- T ]]
  }{
   [[ R |- T ref r ]]
  }
\end{definition}

\begin{lemma}
  \label{lem:r-valid-subst}
  If $[[ ll |- G]]$ and $[[ Cons(H,R,G) ]]$, then $[[forall x in dom G.R |- G(x) ]]$.
\end{lemma}
\begin{proof}
  By $[[ Cons(H,R,G) ]]$, all integer variables in $[[G]]$ must be in
  the domain of $[[R]]$ and must be an integer. From $[[ ll |- G ]]$, any free variables
  in any refinement of any type in $[[G]]$ must be an integer valued variable in $[[G]]$,
  which gives the required result.
\end{proof}

The followings are key lemmas:
\begin{lemma}
  \label{lem:initial}
  $[[ |- D <empty,empty,.,e> ]]$
\end{lemma}

\begin{lemma}
  \label{lem:preservation}
  $[[ |- D <H,R,Es,e> /\ <H,R,Es,e> --> D C ==> |- D C ]]$
\end{lemma}

\begin{lemma}
  \label{lem:assertfail}
  $[[ |- D C ==> C != AssertFail ]]$
\end{lemma}

\begin{definition}
  We will write $[[R < R']]$ to denote two register files such that:
  \begin{enumerate}
  \item $[[ dom R]] \subseteq [[ dom R' ]]$, and
  \item $[[ forall x in R.R(x) = R'(x) ]]$
  \end{enumerate}
\end{definition}

\begin{lemma}[Register Weakening]
  \label{lem:register}
  If $[[ SATv(H, R, Rv, T) ]]$ and $[[R |- T]]$,
  then for any $[[R']]$ such that $[[ R < R' ]]$, $[[ SATv(H, R', Rv, T)]]$.
\end{lemma}
\begin{proof}
  By induction on the shape of $[[T]]$. If $[[ T = T' ref r ]]$, then
  the result follows from the inductive hypothesis.
  We therefore consider the case where
  $[[ T = {nu: int | ph} ]]$. Without loss of generality, we consider
  the case where $[[ dom R' ]] \setminus [[ dom R ]] = \set{x}$,
  and $[[R'(x) = nn]]$. (If $[[R'(x) = a]]$, the extra binding
  also has no effect, and the case where more than one binding is
  added follows from $n$ applications of the following argument.)

  From $[[SATv(H,R,Rv,T)]]$, we conclude that $[[Rv is INT]]$ and that
  $[[ [R][Rv/nu]ph ]]$. If $[[x not in FPV(ph)]]$ then $[[ [R][Rv/nu]ph <=> [R'][Rv/nu]ph ]]$
  and the result holds trivially. Otherwise, if $[[x in FPV(ph)]]$ and $[[x not in R]]$
  then $[[R]]$ is not a valid substitution, violating our assumption.
\end{proof}

\begin{definition}
  A value $[[Rv]]$ is \emph{shape consistent with $[[T]]$ in heap $[[H]]$}, written $[[ H |- Rv :~ T ]]$, iff:
  \begin{enumerate}
  \item $[[ T = T' ref r /\ Rv = a ==> H |- H(a) :~ T' ]]$
  \item $[[ T = {nu:int|ph} /\ v is INT ]]$
  \end{enumerate}
\end{definition}

\begin{definition}
  Two heaps $[[H]]$ and $[[H']]$ are \emph{equivalent modulo $[[a]]$}, written $[[H ~ a H']]$ if:
  \begin{enumerate}
  \item $[[dom H = dom H']]$
  \item $[[forall a' in dom H.a' != a ==> H(a) = H(a')]]$
  \item $[[ H |- a :~ T <=> H' |- a :~ T ]]$
  \end{enumerate}
\end{definition}

\begin{lemma}[Heap Update Ownership Preservation]
  \label{lem:heapop}
  Let $[[H]]$ and $[[H']]$ be two heaps such that $[[H ~ a H']]$ for
  some $[[a]]$. If $[[own(H,v,T)(a) = 0]]$, then
  $[[own(H,v,T) = own(H',v,T)]]$.
\end{lemma}
\begin{proof}
  By induction on the shape of $[[T]]$. If $[[T = {nu:int |ph}]]$ then
  the result trivially holds. Otherwise, $[[T = T' ref r]]$. We assume
  that $[[v = a'']]$ and $[[a'' in H]]$ (otherwise the result
  trivially holds). Consider the case where $[[a'' =
  a]]$. By definition
  $[[own(H,a,T) = {a |-> r} + own(H,H(a),T')]]$, and by the
  assumption that $[[own(H,a,T)(a) = 0]]$ we must have that
  $[[r = 0]]$. Further, by the well-formedness of types, all
  ownerships that appear in $[[T']]$ must be $[[0]]$, thus we have that
  $[[own(H,H(a),T') = own(H',H'(a), T')]]$.

  Finally, consider the case where $[[a'' != a]]$. Then from the
  definition of $[[own(H,a'',T)]]$ and our assumption that
  $[[own(H,a'',T)(a) = 0]]$, we have $[[own(H,H(a''),T')(a) = 0]]$,
  and the result holds from the inductive hypothesis.
\end{proof}

\begin{lemma}
  \label{lem:top-type-sat-all}
  For any $[[n]]$, if $[[H |- v :~ topn]]$ then for any $[[R]]$, $[[ SATv(H,R,v,topn) ]]$.
\end{lemma}
\begin{proof}
  By induction on $[[n]]$. In the base case, by inversion on $[[ H |- v :~ top0]]$ we have
  $[[v is INT]]$ and as $[[ [R][v/nu]Top ==> Top ]]$, we conclude $[[ SATv(H,R,v,top0) ]]$.

  For $[[ n ]]$, by inversion on $[[ H |- v :~ topn ]]$ we have that
  $[[v = a]]$, $[[ a in dom H]]$, and $[[ H |- H(a) :~ topn-1]]$,
  whence the result holds from the inductive hypothesis.
\end{proof}
  
\begin{lemma}[Heap Update Consistency Preservation]
  \label{lem:heapfor0}
  Let $[[H ~ a H']]$ for some $[[a]]$. Then if $[[own(H,v,T)(a) = 0]]$ and $[[SATv(H,R,v,T)]]$ then $[[SATv(H',R,v,T)]]$.
\end{lemma}
\begin{proof}
  By induction on the shape of $[[T]]$. The base case where
  $[[T = {nu:int|ph}]]$ is trivial. We therefore consider the case
  where $[[v = a']]$ and $[[T = T' ref r]]$.

  We first consider the case where $[[a' = a]]$, then by
  our assumption that $[[own(H,a,T)(a) = 0]]$, we must have that
  $[[ T = T' ref 0 ]]$, whereby the $[[ T = topn ]]$ for some $[[n]]$.
  From $[[SATv(H,R,a,T)]]$ we must have that $[[ H |- a :~ T]]$,
  and from $[[H ~ a H']]$, we therefoe have that $[[ H' |- a :~ T]]$
  whereby the result holds from \cref{lem:top-type-sat-all}.

  Otherwise, we have that $[[a' != a]]$, and by definition we must have that
  $[[own(H,H(a),T')(a) = 0]]$ and $[[H'(a) = H(a)]]$ hence the result follows
  from the inductive hypothesis.
\end{proof}

\begin{lemma}[Heap Extension Consistency Preservation]
  \label{lem:newaddheap}
  If we have heap $H$, such that $[[ SATv(H,R,v,T) ]]$. For any heap $H'$,
  $[[ H' = H{a |-> v'}]], [[a not in H]]$, then we have $[[ SATv(H', R, v, T) ]]$.
\end{lemma}
\begin{proof}
  By induction on the shape of $[[ T ]]$.
  The base case where $[[T = {nu:int|ph}]]$ is trivial.
  Next, we consider the case where $[[T = T' ref r]]$.
  We must show that $[[v in dom H' /\ SATv(H',R, H'(v),T') ]]$.
  The first condition is immeidately satisfied by inversion on $[[ SATv(H,R,v,T') ]]$,
  and from $[[a not in H]]$, we have $v\neq a$, which gives that $H'(v)=H(v)$.
  That is we must show $[[ SATv(H',R, H(v),T') ]]$, which is follows from
  the induction hypothesis.
\end{proof}

\begin{lemma}[Type Equivalence Preserves Satisfiability]
  \label{lem:sattosat}
  If $[[T1 ~ T2]]$, then $[[SATv(H,R,v,T1) <=> SATv(H,R,v,T2)]]$.
\end{lemma}
\begin{proof}
  The forward case follows from straightforward induction on the shape of $[[T1]]$
  and from the observation that if $[[ph1 <=> ph2]]$ then $[[ [R][v/x]ph1 <=> [R][v/x]ph2]]$. The
  backwards case follows by symmetric reasoning by induction on the shape of $[[T2]]$.
\end{proof}

\begin{proof}[\cref{lem:preservation}]
  The proof is organized by cases analysis on the transition rule used of $[[e]]$, and showing that the output configuration is well typed by
  $[[ |-D ]]$, and for that we must find a $[[G'']]$ that is consistent with $[[H']]$ and $[[R']]$ and also satisfies the other conditions imposed by
  the definition of $[[ |-D ]]$. Here $[[G'']],[[H']], [[R']]$ represent the type environment, heap and register after the transition respectively.
  In order to show that the ownership invariant is preserved, we need to prove that $[[ forall a in H .F(a) <= 1]]$.
  We give that $[[a in H]]$ and $[[F0]]$ represents the $[[F(a)]]$ before transition, $[[F1]]$ represents the $[[F(a)]]$ after transition.
  We know that $[[forall a in H.F0(a) <= 1]]$ since the configuration is well typed before transition, and to prove $[[F0=F1]]$ in each case.

  % FIXED
  \begin{rneqncase}{R-Var}{
    [[ |- D <H, R, En-1 : Es, x>]], [[<H, R, En-1 : Es, x> --> D <H, R, Es, En-1[x]> ]] \\
  }  
    By the Inversion on configuration typing $[[ |- D <H, R, En-1 : Es, x>]]$ we obtain $[[E = [] /\ e = x ]]$, and thus
    \begin{align*}
      & [[ T = Tn ]] \\
      & [[ G' = Gn ]] \\
      & [[ Th | G | ll |- x : Tn => Gn ]] \\
      & \forall i\in\set{1..n}.[[ Th | [] : Ti => Gi | lli-1 |-e Ei-1 : Ti-1 => Gi-1 ]]
    \end{align*}
    
    Using \cref{lem:stack-well-typed}, we can conclude that $[[ Th | G | lln-1 |- En-1[x] : Tn-1 => Gn-1 ]]$. We therefore take $[[ G'' = G ]]$.
    
    By \cref{lem:stack_var} and $\forall i\in\set{1..n}.[[ Th | [] : Ti => Gi | lli-1 |-e Ei-1 : Ti-1 => Gi-1 ]]$, any decomposition of $[[En-1 [x] ]]$
    into a context $[[E']]$ and expression $[[e']]$ will be well-typed with respect to the types expected by the hole type of $E_{n-2}$.
    
    It remains to show that $[[Cons(H,R,G'')]]$ and $[[ lln-1 |- G ]]$, which follows
    immediately from $[[Cons(H,R,G)]]$ and $[[ ll |- G ]]$.
  \end{rneqncase}

  % FIXED
  \begin{rneqncase}{R-Deref}{
      [[ |- D <H, R, Es, E[let x = *y in e]>]] \\
      [[<H, R, Es, E[let x = *y in e]> --> D <H, R { x' |-> v }, Es, E[ [x'/x]e]> ]] \\
      [[ H(a) = v ]] \andalso [[ R(y) = a ]] \\
    }
    By inversion on the configuration typing relationship, we have that:
    \begin{align*}
      [[ ll |- G0 ]] && [[ Th | []: T => G0' | ll |-e E : Tn => Gn ]] \\
      [[ Cons(H,R,G) ]] && [[ Th | G0 | ll |- let x = *y in e : T => G0' ]]
    \end{align*}
    Using \cref{lem:inversion}, we have there exists some $[[Gp]]$, $[[Gp']]$ and $[[Tp]]$ such
    that:
    \begin{mathpar}
      [[ G0 <: Gp ]] \and [[ Gp',Tp <: G0',T ]] \and
      [[ ll |- Gp ]] \and [[ Gp(y) = T1 + T2 ref r ]] \and
      [[ r > 0 ]] \and [[ Gp' = G' \ x ]] \and [[ ll |- Tp => Gp' ]] \and
      [[ Th | G[y <- (T1 /\ y y = T1 x) ref r], x : T2 | B |- e : Tp => G' ]]
    \end{mathpar}
    From \cref{lem:subtyp-preserves-cons}, we then have $[[Cons(H,R,Gp)]]$.
    We will now show that:
    \begin{align}
      \label{eqn:new-tyenv-cons} & [[Cons(H,R { x' |-> v },G'')]] \\
      \label{eqn:new-tyenv-wf}  & [[ll |- G'']] \\
      & [[Th | G'' | ll |- [x'/x]e : [x'/x]Tp => [x'/x]G' ]]
    \end{align}
    where $[[ G'' = Gp[y <- (T1 /\ y y = x') ref r], x' : T2]]$.
    
    This is sufficient to establish that
    $[[ |- D <H, R { x' |-> v }, Es, E[ [x'/x]e]> ]]$.  To see how, we
    observe that as $[[ ll |- Tp => G' \ x ]]$, by \cref{lem:remove-well-formed-same}
    we have $[[ [x'/x]Tp = Tp]]$ and $[[ ([x'/x]G') \ x' = G' \ x ]]$. Then by
    \cref{lem:well-formed-rem-subtype} and $[[ Gp' = G' \ x = ([x'/x]G') \ x']]$
    we have that $[[ [x'/x]G',Tp <: Gp',Tp]]$.
    From the inversion lemma, we have that $[[ G' \ x,Tp <: G0',T ]]$ and thus
    with two applications of \rn{T-Sub} we can derive:
    \[
      [[Th | G'' | ll |- [x'/x]e : T => G0']]
    \]
    As $[[E]]$ and the stack $[[Es]]$ remained unchanged, combined with
    \cref{eqn:new-tyenv-cons,eqn:new-tyenv-wf} this gives
    $[[ |- D <H, R { x' |-> v }, Es, E[ [x'/x]e]> ]]$ as required.
    As the above argument is used almost completely unchanged
    in all of the following cases, we will invert the redex without regard
    for the \rn{T-Sub} rule, with the understanding that the subtyping rule
    is handled with an argument identical to the above.
    
    We now want to show $[[ Th | G'' | ll |- [x'/x]e : Tp => [x'/x]G' ]]$, $[[ ll |- G'' ]]$,
    and $[[Cons(H,R { x' |-> v }, G'')]]$.
    The first is easy to obtain using \cref{lem:substitution}, and the latter
    follows almost immediately from $[[ ll |- G ]]$.
    
    It therefore remains to show $[[Cons(H,R { x' |-> v }, G'')]]$. To show that the output environment is consistent, it suffices to show that $[[ SATv(H,R',R'(x'),T2) ]]$
    and $[[SATv(H,R',H(R'(y)),T1 /\ y y = x) ]]$.
    If $[[ T1 ]]$ is an integer, by the definition of the strengthening operator, the latter is equivalent to show that $[[ SATv(H,R',H(R'(y)),T1) ]]$
    and that $[[R'(x')=H(R'(y))=H(R(y))]]$, which is immediate from the definition of $\rn{R-Deref}$.
    If $[[ T1 ]]$ is not an integer, then we must only show that $[[ SATv(H,R',H(R'(y)),T1) ]]$.
    
    We know that $[[Cons(H,R,G) ==> SAT(H,R,G) ==> y in R /\ SATv(H,R,R(y),G(y)) ]] $.
    From \cref{lem:satadd,lem:r-valid-subst,lem:register}, we obtain $[[ SATv(H,R,v,T1+T2) ==> SATv(H,R',v,T1) /\ SATv(H,R',v,T2) ]]$, where $[[ R' < R ]]$ and $[[v = H(R(y))]]$.
    We therefore prove that $[[ SATv(H,R',R'(x'),T2) ]]$ and $[[ SATv(H,R',H(R'(y)),T1) ]]$ are satisfied.
    
    We must also show that the ownership invariant is preserved.
    Then, it's to show $[[forall a in H.F(a) <= 1]]$. Define $[[F0]]$ and $[[F1]]$ as follows:
    \begin{align*}
      [[F0]] & = [[F0' + own(H,R(y),G(y))]] \\
      [[F1]] & =[[F1' + own(H',R'(y),G''(y)) + own(H',R'(x'),G''(x'))]] \\
      [[F0']] &  = [[ |< {z in dom G \ {y}} own(H,R(z),G(z))]] \\
      [[F1']] & = [[ |< {z in dom G'' \ {y,x'}} own(H',R'(z'),G''(z')) ]]
    \end{align*}
    By \cref{lem:heapop}, $[[F0' = F1']]$ holds.
    From \cref{lem:ownadd}, we have $[[ own(H,v,T1+T2) ]] = [[ own(H,v,T1) ]] + [[ own(H,v,T2) ]]$, where $[[v = H(R(y))]]$.
    We know that $[[R'(x')=H(R'(y))=H(R(y))]]$, so $[[ own(H,R'(x'),G''(x'))  = own(H,R'(x'),T2) ]]$, $[[ own(H,R(y),G(y)) = own(H,v,T1+T2) ]]$ and $[[ own(H,R'(y),G''(y)) = own(H,H(R'(y)),T1) ]]$,
    so we have $[[own(H,R(y),G(y))=own(H,R'(y),G''(y))]]+ [[own(H,R'(x'),G''(x'))]]$, and conclude that $[[F0=F1]]$.
  \end{rneqncase} % R-Deref

  \begin{rneqncase}{R-Var}{
      [[ |- D <H, R, Es, E[x; e]> ]]\\
      [[ <H, R, Es, E[x; e]> --> D <H, R, Es, E[e]> ]]\\
    }
    By inversion (see \rn{R-Deref}) we have for some $[[G]]$ that:
    \begin{align*}
      & [[ Th | G[x : T0 + T1] | ll |- x : T0 => G[x <- T1] ]] \\
      & [[ Th | G[x <- T1] | ll |- e : T' => G' ]] \\
      & [[ Cons(H,R,G) /\ ll |- G ]]
    \end{align*}
    We take $[[G'' = G[x <- T1] ]]$.
    
    It suffices to show (see \rn{R-Deref})
    that $[[ Th | G'' | ll |- e : T => G']]$, $[[ ll |- G[x <- T1] ]]$
    and $[[Cons(H,R, G'')]]$.
    The first is immediate from the inversion above, and $[[ ll |- G[x <- T1] ]]$
    follows from the assumed well-formedness of $[[ ll |- G ]]$. Finally,
    $[[ Cons(H, R, G'') ]]$ follows from \cref{lem:ownadd,lem:satadd}.
  \end{rneqncase}

  % FIXED
  \begin{rneqncase}{R-Let}{
      [[ |- D <H, R, Es, E[let x = y in e]> ]]\\
      [[<H, R, Es, E[let x = y in e]> --> D <H, R { x' |-> R(y)}, Es, E[ [x'/x]e]> ]]\\
      [[ x' fresh in R ]] \andalso [[R'= R { x' |->  R(y) }]]
    }
    By inversion (see \rn{R-Deref} we have that for some $[[G]]$ that:
    \begin{align*}
      & [[ G(y) = T1 + T2 ]] \\
      & [[ Th | G [ y <- T1 /\ y y = T1 x  ], x : (T2 /\ x x = T2 y) | ll |- e : T => G']] \\
      & [[Cons(H,R,G) /\ ll |- G ]]
    \end{align*}
    We give $[[G'' = G [ y <- T1 /\ y y = T1 x'  ], x' : (T2 /\ x' x' = T2 y)]]$.
    
    It suffices to show (see \rn{R-Deref})
    that $[[ Th | G'' | ll |- [x'/x]e : T => G' \ x ]]$, $[[ ll |- G'']]$,
    and $[[Cons(H,R { x' |->  R(y) }, G'')]]$.
    The first is easy to obtain using \cref{lem:substitution}. The second follows
    from the assumed well-formedness of $[[ T1 ]]$ and $[[ T2 ]]$.
    It therefore remains to show $[[Cons(H,R',G'')]]$.
    
    To show that the output environment is consistent, we must show that $[[SATv(H,R',R'(x'),T2 /\ x' x' = y)]]$ and $[[SATv(H,R',R'(y),T1 /\ y y=x')]]$.
    By reasoning similar to that in $\rn{R-Deref}$, it suffices to show that $[[ SATv(H,R',R'(x'),T2) ]]$ and $[[ SATv(H,R',R'(y),T1) ]]$.
    We know that $[[Cons(H,R,G) ==> SAT(H,R,G) ==> y in R /\ SATv(H,R,R(y),G(y)) ]] $.
    From \cref{lem:satadd} and \cref{lem:register}, we obtain $[[ SATv(H,R,v,T1+T2) ==>  SATv(H,R',v,T1) /\ SATv(H,R',v,T2) ]]$, where $[[ R' < R ]]$ and $v = R(y)$.
    We then have $[[ SATv(H,R',R'(x'),T2) ]]$ and $[[ SATv(H,R',R'(y),T1) ]]$ are satisfied.
    
    We must also show that the ownership invariant is preserved.
    Then, it's to show $[[forall a in H.F(a) <= 1]]$. Define $[[F0]]$ and $[[F1]]$ as follows:
    \begin{align*}
    [[F0]] & = [[F0' + own(H,R(y),G(y))]] \\ 
    [[F1]] & = [[F1' + own(H',R'(y),G''(y)) + own(H',R'(x'),G''(x'))]] \\
    [[F0']] & = [[ |< {z in dom G \ {y}} own(H,R(z),G(z)) ]] \\
    [[F1']] & = [[ |< {z in dom G'' \ {y,x'}} own(H',R'(z'),G''(z'))]]
    \end{align*}
    By \cref{lem:heapop}, $[[F0' = F1']]$ holds.
    That $[[own(H,R'(x'),T2) + own(H,R'(y),T1) = own(H,R(y),T1+T2)]]$ follows immediately
    from \cref{lem:ownadd} and the condition $[[R(y)=R'(x')=R'(y)]]$.
    We therefore conclude that $[[F0=F1]]$.
  \end{rneqncase} % R-Let
 
  \begin{rneqncase}{R-LetInt}{ % FIXED
      [[ |- D <H, R, Es, E[let x = nn in e]>]]\\
      [[ <H, R, Es, E[let x = nn in e]> --> D <H, R { x' |-> nn }, Es, E[ [x'/x]e]> ]]
    }
    By inversion (see \rn{R-Deref} we have that, for some $[[G]]$:
    \begin{align*}
      & [[ Th | G, x:{nu : int | nu = nn } | ll |- e : T => G']] \\
      & [[ Cons(H,R,G) /\ ll |- G ]]
    \end{align*}
    
    We give that $[[ G''= G,x':{nu:int | nu = nn}]]$, and it thus suffices to show
    that $[[ Th | G'' | ll |- [x'/x]e : T => G' \ x]]$, $[[ ll |- G'' ]]$,
    and $[[ Cons(H, R { x' |-> nn }, G'') ]]$.
    The first one is easy to obtain using the \cref{lem:substitution}, and the final two
    items are trivial.
  \end{rneqncase} % R-LetInt
  
  \begin{rneqncase}{R-IfTrue}{ % DONE
      [[ |- D <H, R, Es, E[ifz y then e1 else e2]>]]\\
      [[ <H, R, Es, E[ifz y then e1 else e2]> --> D <H, R, Es, E[e1]> ]]
    }
    By inversion (see \rn{R-Deref}) we have that for some $[[G]]$:
    \begin{align*}
      & [[ Th | G[x <- {nu:int | ph /\ nu = 0 }] | ll |- e1 : T => G' ]] \\
      & [[ Cons(H,R,G) /\ ll |- G /\  G(x) = {nu:int|ph} ]]
    \end{align*}
    We take $[[ G'' = G[x <- {nu:int | ph /\ nu = 0 }] ]]$, and want to show that $[[ Cons(H, R, G'') ]]$ (that $[[ Th | G'' | ll |- e1 : T => G' ]]$ and $[[ ll |- G'' ]]$ is immediate).
    
    By definition $[[Cons(H,R,G) ==> SAT(H,R,G) ==> x in R /\ R(x) is INT /\  [R][R(x)/nu]ph]]$, here $[[ G(x) = {nu:int | ph}]]$.
    The refinement predicates $[[ph]]$ still holds in the output environment, since nothing changes in the heap and the register after transition.
    Also from precondition of $\rn{R-IfTrue}$, we have $[[R(x)=0]]$, thus $[[x]]$ satisfies the refinement that $[[nu=0]]$.
    Thus $[[ [R][R(x)/nu](ph /\ nu = 0)]]$ is trivially satisfied.
  \end{rneqncase} %R-IfTrue
  
  \begin{rncase}{R-IfFalse} % FIXED
    Similar to the case for \rn{R-IfTrue}.
  \end{rncase}
  
  \begin{rneqncase}{R-MkRef}{ 
      [[ |- D <H, R, Es, E[let x = mkref y in e]>]]\\
      [[ <H, R, Es, E[let x = mkref y in e]> --> D <H { a |-> R(y) }, R { x' |-> a }, Es, E[ [x'/x]e]> ]]\\
      [[ a not in H ]]
    }
    By inversion (see \rn{R-Deref}) we have that for some $[[ G ]]$:
    \begin{align*}
      & [[ G(y) = T1 + T2 ]] \\
      & [[ Th | G[y <- T1],x : (T2 /\ x x = y) ref 1 | ll |- e : T => G' ]] \\
      & [[ Cons(H,R,G) /\ ll |- G ]]
    \end{align*}
    We give $[[ G'' = G[y <- T1],x' : (T2 /\ x' x' = y) ref 1 ]]$,
    and must show that $[[ Th | G'' | ll |- e : T => G' ]]$, $[[ ll |- G'' ]]$ and
    $[[ Cons(H' = H { a |-> R(y) }, R' = R { x' |-> a }, G'') ]]$. The first follows
    from \cref{lem:substitution} and the second from the assumed well-formedness of
    $[[T1 + T2 ]]$.
    
    It remains to show $[[Cons(H',R',G'')]]$.
    To show that the output environment is consistent, we must show that $[[SATv(H',R',R'(x'),T2 /\ x' x'=y ref 1)]]$ and $[[ SATv(H',R',R'(y),T1) ]]$.
    By reasoning similar to that in $\rn{R-Deref}$, it suffices to show that $[[ SATv(H',R',R'(x'),T2 ref 1) ]]$ and $[[ SATv(H',R',R'(y),T1) ]]$.
    We know that $[[Cons(H,R,G) ==> SAT(H,R,G) ==> y in R /\ SATv(H,R,R(y),G(y)) ]] $.
    From \cref{lem:register}, we obtain $[[ SATv(H,R,v,T1+T2) ==> SATv(H,R',v,T1+T2) ]]$. By \cref{lem:newaddheap}, we have $[[ SATv(H',R',v,T1+T2) ]]$.
    Then by \cref{lem:satadd}, we have $[[ SATv(H',R',v,T1) /\ SATv(H',R',v,T2) ]]$, where $[[ R' < R ]]$ and $[[v = R(y)]]$.
    We then have $[[ SATv(H',R',R'(x'),T2 ref 1) ]]$ and $[[ SATv(H',R',R'(y),T1) ]]$ are satisfied.
    
    We must also show that the ownership invariant is preserved.
    Then, it's to show $[[forall a in H.F(a) <= 1]]$. We have:
    \begin{align*}
      [[F1]] & = [[|< {z in dom G''} own(H',R'(z'),G''(z'))]] \\
             & = [[ |< {z in dom G} own(H,R(z),G(z)) + {a' |->  1}]] \\
             & = [[F0 + {a' |-> 1}]]
    \end{align*}
    with $[[a' not in H]]$.
    
    We want to show that $[[forall]][[a in H']].F_1(a) \leq 1$.
    Suppose $[[a != a']]$ (that is $[[a in H]]$): we have $[[F1(a)= F0(a)]]$ and thus $[[F1(a) <= 1]]$ by $[[Cons(H,R,G)]].$
    Next, suppose $a=a'$; we have $[[F1(a)=1]]$ only if $[[a' not in F0]]$, where $[[F0= |< {z in dom G} own(H,R(z),G(z))]]$. This requirement immediately holds from $[[a' not in H]]$ by the definition of $[[own(H,v,T)]]$.
  \end{rneqncase} % R-MkRef

  \begin{rneqncase}{R-Assign}{ % FIXED
      [[ |- D <H, R, Es, E[y:=x;e]>]]\\
      [[ <H, R, Es, E[y:=x;e]> --> D <H { a <- R(x)}, R, Es, E[e]> ]] \\
      a = R(y)
    }
    By inversion (see the \rn{R-Deref} case) we have that
    \begin{align*}
      & [[ Th | G[x: T1 + T2][y : T' ref 1] | ll |- y := x; e : T => G']] \\
      & [[ Th | G[x <- T1][y <- T2 /\ y y = T2 x ref 1] | ll |- e : T => G']] \\
      & [[Cons(H,R,G) /\ ll |- G ]]
    \end{align*}
    We give $[[ G'' = G[x <- T1][y <- T2 /\ y y = T2 x ref 1] ]]$. That
    $[[ Th | G'' | ll |- e : T => G' ]]$ and $[[ ll |- G'' ]]$ is immediate.
    
    We must therefore show that $[[ Cons(H'= H { a <- R(y) },R'= R,G'')]]$.
    To show that the output environment is consistent, we must show that $[[SATv(H',R,R(y),T1 /\ y y = x ref 1)]]$ and $[[ SATv(H',R,R(x),T1) ]]$.
    By reasoning similar to that in $\rn{R-Deref}$, it suffices to show that $[[ SATv(H',R,R(y),T2 ref 1) ]]$ and $[[ SATv(H',R,R(x),T1) ]]$.
    We define $[[F0]]$ and $[[F1]]$ as below:
    \begin{align*}
      [[F0]] & = [[F0' + own(H, R(y), G(y)) + own(H, R(x), G(x)) = F0' + F0'']] \\
      [[F1]] & = [[F1' + own(H', R(y), G''(y)) + own(H', R(x), G''(x))= F1' + F1'' ]] \\
      [[F0']] & = [[ |< {z in dom G \ {y,x} } own(H,R(z),G(z)) ]] \\
      [[F1']] & = [[ |< {z in dom G'' \ {y,x}} own(H',R(z),G''(z)) ]] \\
    \end{align*}
    By the definition of the ownership function and $[[G(y) = T' ref 1 /\ G(x) = T1 + T2]]$ we have:
    \begin{align*}
      [[F0'']] & = [[own(H, H(R(y)), T') + {a |-> 1} + own(H, R(x), T1 + T2)]] \\
      [[F1'']] & = [[own(H', H'(R(y)), T2) + {a |-> 1} + own(H',R(x), T1)]]
    \end{align*}
    As $[[ F0(a) <= 1 ]]$ (from $[[Cons(H,R,G)]]$) and from
    \[
      [[F0(a)=F0'(a) + F''0(a) = F0'(a) + own(H, H(R(y)), T')(a) + 1 + own(H, R(x), T1 + T2)(a)]]
    \]
    we have $[[own(H, R(x), G(x))(a)=own(H, R(x), T1 + T2)(a)=0]]$.
    
    We know that $[[Cons(H,R,G) ==> SAT(H,R,G) ==> forall x in dom G.x in R /\ SATv(H,R,R(x),G(x)) ]]$.
    If we show that $[[ H ~ a H']]$, then by \cref{lem:heapfor0} and $[[own(H, R(x), T1 + T2)(a)=0]]$, we will obtain $[[ SATv(H',R,v,T1+T2) ]]$.

    To show $[[H ~ a H']]$, it suffices to show that
    $[[H |- H(a) :~ T' <=> H {a <- v} |- v :~ T2]]$ (the other two conditions
    are immediate). From the condition that $[[T']]$ and $[[T2]]$ have similar shapes,
    if we can show that $[[ H { a <- v } |- H(a) :~ T']]$ and $[[ H |- v :~ T2 ]]$,
    we will have the desired result.
    It is a simple inductive argument to show that $[[a]]$ cannot be reached through
    pointer dereferences from either $[[v]]$ or $[[H(a)]]$; thus the value of $[[a]]$ is
    irrelevant to both derivations, giving us the desired result.

    Then by \cref{lem:satadd}, we have $[[ SATv(H',R,v,T1) /\ SATv(H',R,v,T2) ]]$, where $[[v = R(x)]]$.
    We then have $[[ SATv(H',R,R(y),T2 ref 1) ]]$ and $[[ SATv(H',R,R(x),T1) ]]$ are satisfied.
    
    We must also show that the ownership invariant is preserved.
    Then, it's to show $[[forall a in H.F(a) <= 1]]$.
    As $[[F0'=F1']]$ holds by pointwise application of \cref{lem:heapop}, and $[[forall a in H.F0(a) <= 1]]$, if $[[forall a' in H'. F1''(a') <= F0''(a')]]$, we can conclude that $[[F1(a') <= F0(a') <= 1]]$.
    
    Suppose for some arbitrary $[[a in H]]$, $[[a= a']]$, then:
    \begin{align*}
      [[F1''(a)]] & = [[own(H', H'(R(y)), T2)(a) + own(H', R(x), T1)(a)+1]] \\
      [[F0''(a)]] & = [[own(H, R(x), T1 + T2)(a) + own(H, H(R(y)), T')(a)+1]]
    \end{align*}
    We know $[[F0(a') <= 1]]$, hence $[[own(H, R(x), T2 + T1)(a) = own(H, H(R(y)), T')(a) = 0]]$.
    By \cref{lem:heapop}, we have $[[own(H, R(x), T2 + T1) = own(H', R(x), T2 + T1)]]$.
    Also by \cref{lem:ownadd}, we have $[[own(H', R(x), T2+T1) = own(H', R(x), T1)+own(H', R(x), T2)]]$.
    Then we have $[[own(H', H'(R(y)), T2)(a)=own(H', R(x), T1)(a)=0]]$.
    Therefore, \[
      [[F1''(a)=own(H', H'(R(y)), T2)(a) + own(H', R(x), T1)(a)+1 = 1 = F0''(a')]]
    \]  
    Next, suppose $a\neq a'$;
    \begin{align*}
      [[F1''(a')]] & = [[own(H', H'(R(y)), T2)(a') + own(H', R(x), T1)(a') ]] \\
      [[F0''(a')]] & = [[own(H, R(x), T2 + T1)(a') + own(H, H(R(y)), T')(a') ]]
    \end{align*}
    By reasoning similar to the case for $a= a'$, we have $[[F1''(a') <= own(H, R(x), T2 + T1)(a') <= F0''(a')]]$.
    Finally, we conclude that $[[forall a' in H'.F1(a') <= 1]]$.
  \end{rneqncase} % R-Assign
  
  \begin{rneqncase}{R-Alias}{
    [[ |- D <H, R, Es, E[alias(x = y); e]>]]\\
    [[ <H, R, Es, E[alias(x = y); e]> --> D <H, R, Es, E[e]> ]]\\
    }
    By inversion (see \rn{R-Deref}) we have for some $[[G]]$ that:
    \begin{align*}
      & [[ Th | G[x : T1 ref r1][y: T2 ref r2] | ll |- alias(x = y); e : T => G']] \\
      & [[ Th | G[x <- T1' ref r1'][y <- T2' ref r2'] | ll |- e : T => G']] \\
      & [[ T1 ref r1 + T2 ref r2 ~ T1' ref r1' + T2' ref r2' ]] \\
      & [[ Cons(H,R,G) /\ ll |- G ]]
    \end{align*}
    We give $[[ G'' = G[x <- T1' ref r1'][y <- T2' ref r2'] ]]$, and must show
    $[[ Th | G'' | ll |- e : T => G' ]]$, $[[ ll |- G'']]$, $[[Cons(H, R, G'')]]$.
    The first is immediate, and the second follows from the definition of $[[~]]$ and the
    assumed well-formedness of $[[ T1 ]]$ and $[[ T2 ]]$.
    
    To show $[[Cons(H,R,G'')]]$ we first define:
    \begin{align*}
      [[Tp1]] = & [[T1 ref r1]] \\
      [[Tp2]] = & [[T2 ref r2]] \\
      [[Tq1]] = & [[T1' ref r1']] \\
      [[Tq2]] = & [[T2' ref r2']] \\
      [[Tq]] = & [[Tq1 + Tq2]] \\
      [[Tp]] = & [[Tp1 + Tp2 ]]
    \end{align*}
    We thus have $[[Tq ~ Tp]]$.
    
    We know that $[[Cons(H,R,G) ==> SAT(H,R,G) ==> y in R /\ SATv(H,R,R(y),G(y)) ]]$.
    From $[[Tp1 + Tp2 = Tp]]$ and \cref{lem:satadd}, we have
    $[[SATv(H,R,v,Tp1) /\ SATv(H,R,v,Tp2) ==> SATv(H,R,v,Tp)]]$, where $[[v = H(R(y))=H(R(x))]]$.
    Similarly, we also have $[[SATv(H,R',v,Tq) ==> SATv(H,R',v,Tq1) /\ SATv(H,R',v,Tq2)]]$, where $[[v = H(R(y))=H(R(x))]]$.
    From $[[Tq ~ Tp]]$ and \cref{lem:sattosat}, we then have $[[SATv(H,R,v,Tp) ==> SATv(H,R,v,Tq)]]$.
    Then from the reasoning above, the refinements of $[[Tq1]]$ and $[[Tq2]]$ are valid and $[[Cons(H, R, G'')]]$ holds.
    
    Then, it's to show $[[forall a in H.F(a) <= 1]]$. Here $[[F0]]$ represents the $[[F(a)]]$ before transition, $[[F1]]$ represents the $[[F(a)]]$ after transition.
    To prove that $[[F0=F1]]$ follows from:
    \begin{align*}
      &[[own(H,R(x),T1 ref r1) + own(H,R(y),T2 ref r2) ]] =  \\
      &\,\,\,\,[[ own(H,R(x),T1' ref r1') + own(H,R(y),T2' ref r2')]]
    \end{align*}
    which follows immediately from the conditions $[[ T1 ref r1 + T2 ref r2 ~ T1' ref r1' + T2' ref r2']]$, $[[R(x) = R(y)]]$, and \cref{lem:ownadd,lem:ownequiv-preserv}.
  \end{rneqncase} % R-Alias

  \begin{rncase}{R-AliasPtr}
    By reasoning similar to the \rn{R-Alias} case.
  \end{rncase}
    
  
  \begin{rncase}{R-AliasFail,R-AliasPtrFail} % DONE
    The result configuration $[[AliasFail]]$ is trivially well-typed.
  \end{rncase}
  
  \begin{rneqncase}{R-Assert}{ % DONE
    [[ |- D <H, R, Es, E[assert(ph); e]>]]\andalso [[ G |= ph ]]\\
    [[ <H, R, Es, E[assert(ph); e]> --> D <H, R, Es, E[e]> ]]\\
    [[ Th | G | ll |- assert(ph); e : T => G']]
    }
    By inversion (see \rn{R-Deref}) we can obtain $[[ Th | G | ll |- e : T => G' ]]$, and
    the result follows immediately by taking $[[G'' = G ]]$.
  \end{rneqncase} % R-Assert
  
  \begin{rneqncase}{R-AssertFail}{ % DONE
      [[ |- D <H, R, Es, E[assert(ph); e]>]] \\
      [[ <H, R, Es, E[assert(ph); e]> --> D AssertFail ]]\\
      [[ Th | G | ll |- assert(ph); e : T => G']]
    }
    By inversion (see the \rn{R-Deref} case) we have that
    $[[ G |= ph ]]$, i.e., $[[ |= [G] ==> ph ]]$,
    for some $[[G]]$ such that $[[Cons(H,R,G)]]$ and
    $[[ ll |- G ]]$. We therefore have $[[ |= [R][G] ]]$.
    From the precondition of \rn{R-AssertFail} we have that
    $[[  !|= [R]ph ]]$. But from $[[ |= [G] ==> ph ]]$ and $[[ |= [R][G] ]]$
    we can conclude that $[[ |= [R]ph ]]$, yielding a contradiction.
    We therefore conclude that this case is impossible.
  \end{rneqncase} % R-AssertFail
  
  \begin{rneqncase}{R-Call}{
      [[ |- D <H, R, Es, E[let x = f l (y1,,yn) in e']>]]\\
      [[f |-> (x1, .., xn) e in D]] \\
      [[ <H, R, Es, E[let x = f l (y1,,yn) in e']> --> D <H, R, E[let x = [] l in e'] : Es, [y1/x1] ,, [yn/xn] e> ]] \\
    }
    We must show that
    $[[ <H, R, E[let x = [] l in e'] : Es, [y1/x1] ,, [yn/xn] e> ]]$
    for some $[[G'']]$.
    
    By inversion on the configuration typing, we have that, for some $[[G]]$:
    \begin{align*}
      & [[ Th | G | ll |- let x = f l (y1,,yn) in e' : T => G' ]] \\
      & [[ Th | [] : T => G' | ll |-e E : Tn => Gn ]]
    \end{align*}
    Taking $[[ T1 = T ]], [[ G1 = G' ]], [[ G0 = G ]], [[ G2 = Gn ]], [[ T2 = Tn ]]$,
    by \cref{lem:callfunc} we have, for some $[[T''']], [[G''']]$:
    \begin{align*}
      & [[ Th | G | l : ll |- vsub e : T''' => G''' ]] \\
      & [[ Th | []: T''' => G''' | ll |-e E[let x = [] l in e'] : T => G' ]]
    \end{align*}
    where:
    \begin{align*}
      [[ vsub ]] & = [[ [y1/x1] ,, [yn/xn] ]] \\
      [[ Th(f) ]] & = [[ A <x1 : Ti ,, xn : Tn> -> <x1: T1' ,, xn : Tn' | Tp > ]]
    \end{align*}
    We therefore take $[[ G'' = G ]]$. The well-formedness of $[[G'']]$
    follows from $[[G'' = G]]$ and by inversion on the input configuration.
     
    We must also prove that $\forall i\in\set{1..n+1}.[[ Th | [] : Ti => Gi | lli-1 |-e E'i-1 : Ti-1 => Gi-1 ]]$  where $[[ E'n = E[let x = [] l in e'] ]]$ and $[[ E'i = Ei ]] (0 \leq i < n)$,
    which can be divided into proving
    $\forall i\in\set{1..n}.[[ Th | [] : Ti => Gi | lli-1 |-e E'i-1 : Ti-1 => Gi-1 ]]$ and $[[ Th | [] : Tn+1 => Gn+1 | lln |-e E'n : Tn => Gn ]]$. The first follows by inversion on $[[ |- D <H, R, Es, E[let x = f l (y1,,yn) in e']>]]$.

    We define $[[Gn+1 = G''' ]]$ and $[[Tn+1 = T''' ]]$.
    It remains to show $[[ Th | [] : Tn+1 => Gn+1 | lln |-e E'n : Tn => Gn ]]$.
    
    As $[[En']]$ is $[[ E[let x = [] l in e'] ]]$,
    from above we obtain $[[ Th | [] : Tn+1 => Gn+1 | ll |-e E[let x = [] l in e'] : Tn => Gn ]]$.
    Next, by \cref{lem:stack_var} and $[[ Th | G | l:ll |- vsub e : Tn+1 => Gn+1 ]]$, any decomposition of $[[vsub e]]$ into a context $[[E']]$
    and expression $[[e']]$ will be well-typed as $[[Tn+1]]$ and $[[Gn+1]]$, which are the return type and environment expected by the hole of return context $[[En']]$.
    
    Finally, $[[Cons(H,R,G'')]]$ follows immediately from $[[Cons(H,R,G)]]$ and $[[G''=G]]$.
  \end{rneqncase}
\end{proof}

\begin{lemma}
  \label{lem:ownadd}
  If $[[ Tp = T1 + T2 ]]$, then $[[own(H,v,Tp) = own(H,v,T1)+own(H,v,T2)]]$.
\end{lemma}
\begin{proof}
  By induction on the rules used to derive $[[ T1 + T2 = Tp]]$.
  \begin{rncase}{Tadd-Int}
    We have $[[own(H,v,Tp)=own(H,v,T1 + T2)]]$, where $[[ T1 + T2 = {nu:int | ph1/\ph2} ]]$,
    $[[own(H,v,T1)]]$ and $[[own(H,v,T2)]]$, where $[[ T1= {nu:int | ph1} ]], [[ T2 = {nu:int | ph2} ]]$.
  
    From the definition of ownership, we have $[[own(H,v,Tp)=own(H,v,T1)=own(H,v,T2)=empty]]$.
    It is thus trivial that $[[own(H,v,Tp) = own(H,v,T1) + own(H,v,T2)]]$.
  \end{rncase}

  \begin{rncase}{Tadd-Ref}
    We have $[[own(H,v,Tp)=own(H,v,T1 + T1)]]$, where $[[ T1 + T2 = (T1' + T2') ref r1+r2 ]]$,
    and  $[[ T1 = T1' ref r1 ]]$, $[[ T2 = T2' ref r2 ]]$.
    
    From the definition of ownership, we have $[[own(H,v,Tp)={a |-> r1+r2 } + own(H,H(v),T1' + T2')]]$ and:
    \begin{align*}
      [[own(H,v,T1) + own(H,v,T2)]] & = [[{a |-> r1}+own(H,H(v),T1') + {a |-> r2}+own(H,H(v),T2') ]] \\
                                    & = [[{ a |-> r1 + r2 } + own(H,H(v),T1') + own(H,H(v),T2')]]
    \end{align*}
    By the induction hypothesis, have that $[[own(H,H(v),T1' + T2') = own(H,H(v),T1') + own(H,H(v),T2')]]$ and can conclude that $[[own(H,v,Tp) = own(H,v,T1) + own(H,v,T2)]]$.
  \end{rncase}
\end{proof}

\begin{lemma}
  \label{lem:ownequiv-preserv}
  If $[[ T1 ~ T2]]$, then $[[ own(H,v,T1) = own(H,v,T2)]]$.
\end{lemma}
\begin{proof}
  Straightforward induction on the shape of $[[T1]]$.
\end{proof}

\begin{lemma}
  \label{lem:satadd}
  If $[[ Tp =  T1+T2 ]]$, we have:
  \[
    [[ SATv(H, R, Rv, Tp) <=> SATv(H, R, Rv, T1) /\ SATv(H, R, Rv, T2) ]]
  \]
\end{lemma}
\begin{proof}
  By induction on the rules used to derive $[[ T1 + T2 ]]$. In the following
  we only prove the forward direction of the implication; the backwards
  direction is symmetric.
  \begin{rncase}{Tadd-Int}
    We have $[[ SATv(H, R, Rv, T1+T2) ]]$, where $[[ T1 + T2 = {nu:int | ph1/\ph2} ]]$,
    $[[ SATv(H, R, Rv, T1) ]]$ and $[[ SATv(H, R, Rv, T2) ]]$, where $[[ T1= {nu:int | ph1} ]], [[ T2 = {nu:int | ph2} ]]$.
    
    From the definition of $[[SATv]]$, we have $[[ SATv(H, R, Rv, T1) ==> [R][v/nu]ph1 ]]$ and $[[ SATv(H, R, Rv, T2) ==> [R][v/nu]ph2 ]]$, and 
    $[[ SATv(H, R, Rv, T1+T2) ==> [R][v/x](ph1 /\ ph2) ]]$.
    It is immediate that for any value $v$ such that $[[ [R][v/nu](ph1 /\ ph2) ]]$, we must have $[[ [R][v / nu]ph1 ]]$ and $[[ [R][v / nu]ph2 ]]$.
    We then conclude $[[ SATv(H, R, Rv, T1+T2) ==> SATv(H, R, Rv, T1) /\ SATv(H, R, Rv, T2) ]].$
  \end{rncase}

  \begin{rncase}{Tadd-Ref}
    Immediate from the definition of $[[SATv]]$ and the inductive hypothesis.
  \end{rncase}
\end{proof}

\begin{lemma}[Inversion]
  \label{lem:inversion}
  If $[[ B |- G ]]$, and $[[ Th | G | B |- e0 : T => G' ]]$,
  then there exists some $[[Gp]]$, $[[Tp]]$, and $[[Gp']]$
  such that $[[G <: Gp]]$, $[[ B |- Gp ]]$, $[[Gp',Tp <: G',T]]$, where:
  \begin{enumerate}
  \item If $[[e0 = x]]$ then $[[ Gp(x) = Tp + T']]$ and $[[Gp' = Gp[x <- T'] ]]$.
  \item If $[[e0 = let x = y in e]]$, then
    $[[ Th | Gp [ y <- T1 /\ y y = T1 x ], x : (T2 /\ x x = T2 y) | B|- e : Tp => Gp0 /\ B |- Tp => Gp0 \ x /\ Gp' = Gp0 \ x]]$
    where $[[Gp(y) = T1 + T2]]$.
  \item If $[[ e0 = let x = nn in e]]$ then $[[ Th | Gp, x : {nu: int | nu = nn } | B |- e : Tp => Gp0 /\ B |- Tp => Gp0 \ x /\ Gp' = Gp0 \ x ]]$
  \item If $[[e0 = ifz x then e1 else e2 ]]$ then:
    \begin{itemize}
    \item $[[ Gp(x) = { nu : int | ph } ]]$
    \item $[[ Th | Gp[ x <- {nu:int| ph /\ nu = 0}] | B |- e1 : Tp => Gp' ]]$
    \item $[[ Th | Gp[ x <- {nu:int| ph /\ nu != 0}] | B |- e2 : Tp => Gp' ]]$
    \end{itemize}
  \item If $[[ e0 = let x = mkref y in e ]]$, then $[[ Gp(y) = T1 + T2 /\ Th | G[y <- T1],x : (T2 /\ x x = T2 y) ref 1 | B |- e : T => Gp0 /\ Gp' = Gp0 \ x ]]$.
    
  \item If $[[ e0 = let x = *y in e ]]$, then:
    \begin{itemize}
    \item $[[Gp(y) = T1 + T1 ref r]]$
    \item $[[Th | Gp[y <- (T1 /\ y y = T1 x) ref r], x : T2 | B |- e : Tp => Gp0]]$
    \item $[[r > 0]]$
    \item $[[Gp' = Gp0 \ x]]$
    \end{itemize}
  \item If $[[ e0 = let x = f l (y1,,yn) in e]]$ then:
    \begin{itemize}
    \item $[[ Gp(yi) = csub vsub Ti ]]$ for each $i \in \set{1,\ldots,n}$
    \item $[[ Th | Gp[yi <- csub vsub Ti'], x : csub vsub T | B |- e : Tp => Gp0 ]]$
    \item $[[ Gp' = Gp0 \ x ]]$
    \item $[[ Th(f) = A < x1 : T1 ,, xn : Tn > -> <x1: T1' ,, xn : Tn' | T > ]]$
    \item $[[csub = [l:B/A] ]]$
    \item $[[ vsub = [y1/x1] ,, [yn/xn] ]]$
    \end{itemize}
  \item If $[[ e0 = y := x; e ]]$ then:
    \begin{itemize}
    \item $[[ Gp(x) = T1 + T2 ]]$
    \item $[[ Gp(y) = T' ref 1 ]]$
    \item $[[ Th | Gp[x <- T1][y <- (T2 /\ y y = T2 x) ref 1] | B |- e : Tp => Gp' ]]$
    \item The shapes of $[[T']]$ and $[[T2]]$ are similar, i.e, $\forall [[H]],[[Rv]].[[H |- Rv :~ T' <=> H |- Rv :~ T2 ]]$.
    \end{itemize}
  \item If $[[ e0 = alias(x = y); e ]]$ then there exist some $[[T1]], [[T2]], [[T1']], [[T2']], [[r1]], [[r2]], [[r1']], [[r2']]$ such that:
    \begin{itemize}
    \item $[[ T1 ref r1 + T2 ref r2 ~ T1' ref r1' + T2' ref r2' ]]$
    \item $[[ Gp(x) = T1 ref r1 ]]$ and $[[Gp(y) = T2 ref r2 ]]$
    \item $[[ Th | G[x <- T1' ref r1'][y <- T2' ref r2'] | B |- e : Tp => Gp' ]]$
    \end{itemize}
  \item If $[[ e0 = alias(x = *y); e ]]$ then there exist some $[[T1]], [[T2]], [[T1']], [[T2']], [[r1]], [[r2]], [[r1']], [[r2']], [[r]]$, such that:
    \begin{itemize}
    \item $[[ T1 ref r1 + T2 ref r2 ~ T1' ref r1' + T2' ref r2' ]]$
    \item $[[Gp(x) = T1 ref r1]]$ and $[[Gp(y) = (T2 ref r2) ref r]]$
    \item $[[ Th | G[x <- T1' ref r1'][y <- (T2' ref r2') ref r] | B |- e : Tp => Gp' ]]$
    \end{itemize}
  \item If $[[ e0 = x; e' ]]$ then $[[ Th | Gp[x: T' + T0] | B |- x : T1 => Gp[x <- T0] ]]$ and $[[ Th | Gp[x <- T0] | B |- e' : Tp => Gp' ]]$
  \item If $[[ e0 = assert(ph); e ]]$ then $[[ Gp |= ph ]]$ and $[[ Th | Gp | B |- e : Tp => Gp' ]]$
  \end{enumerate}
\end{lemma}
\begin{proof}
  By straightforward induction on the typing relation and the
  transitivity of the subtyping relation \cref{lem:subtype-transitive}.

  The only case of note is the case for $[[ e0 = x; e2 ]]$. If the subderivation for $[[x]]$
  has applications of \rn{T-Sub} then the subtypings on the output environment can be pushed
  into application subtyping on input environments when typing $[[e']]$. Similarly,
  any input subtypings on the input environment of the derivation of $[[x]]$ can be pushed
  into \rn{T-Sub} rules such that $[[G <: Gp[x : T' + T0] ]]$.
\end{proof}

\begin{lemma}
  \label{lem:subtype-transitive}
  \leavevmode
  \begin{enumerate}
  \item If $[[ G <: G' ]]$ then $[[ [G] ==> [G'] ]]$.
  \item If $[[ G <: G']]$, $[[ G |- T1 <: T2 ]]$ and $[[ G' |- T2 <: T3 ]]$ then $[[ G |- T1 <: T3 ]]$.
  \item If $[[ G <: G' ]]$ and $[[ G' <: G'' ]]$, then $[[ G <: G'' ]]$
  \end{enumerate}
\end{lemma}
\begin{proof}
  \begin{enumerate}
  \item It suffices to show that $[[ [G] ==> [x/nu]ph']]$ for any $x in dom G'$ where $[[G'(x) = {nu:int|ph'}]]$. From $[[ G <: G' ]]$ we have $[[ |= [G] /\ ph ==> ph' ]]$ where $[[ G(x) = {nu:int|ph}]]$. We must then have $[[ |= [G] /\ [x/nu]ph ==> ph' ]]$. From the definition of $[[ [G] ]]$ we have $[[ [G] /\ [x/nu]ph <=> [G] ]]$, giving the desired result.
  \item By induction on $[[T1]]$. The only case of note is where
    $[[ T1 = {nu:int|ph1} ]],[[T2 = {nu:int|ph2}]], [[ T3 =
    {nu:int|ph3}]]$. By inversion on $[[ G' |- T2 <: T3 ]]$ we have
    $ [[ |= [G'] /\ ph2 ==> ph3 ]]$ and from part 1 above and
    $[[ G <: G' ]]$ we have $[[ |= [G] /\ ph2 ==> ph3 ]]$. From $[[ |= [G] /\ ph1 ==> ph2 ]]$
    by inversion on $[[ G |- T1 <: T2 ]]$, we can get the desired result.
  \item Immediate corollary of the above.
  \end{enumerate}
\end{proof}

\begin{lemma}
  \label{lem:well-formed-rem-subtype}
  If $[[ ll |- T => G \ x ]]$ then $[[ G,T <: G \ x,T ]]$
\end{lemma}
\begin{proof}
  Immediate.
\end{proof}

\begin{lemma}
  \label{lem:remove-well-formed-same}
  If $[[ ll |- T => G \ x]]$ then $[[ [x'/x]T = T ]]$ and $[[ [x'/x]G \ x' = G \ x ]]$.
\end{lemma}
\begin{proof}
  By induction on the substitution operations. \JT{That we never
    bothered to define anywhere, woops}
\end{proof}

\begin{lemma}
  \label{lem:subtyp-preserves-cons}
  If $[[ G <: G' ]]$ and $[[ Cons(H,R,G)]]$ then:
  \begin{enumerate}
  \item If $[[G |- T1 <: T2 ]]$, then for any $[[v]]$, $[[ forall a in H.own(H,v,T1)(a) < own(H,v,T2)(a) ]]$
  \item Let $[[ F = |< { z in dom G' } own(H,R(z),G(z)) ]]$, $[[forall a in H.F(a) <= 1]]$
  \item If $[[ G |- T <: T']]$ and $[[SATv(H,R,v,T)]]$ then $[[SATv(H,R,v,T')]]$
  \item $[[SAT(H,R,G')]]$
  \item $[[Cons(H,R,G')]]$
  \end{enumerate}
\end{lemma}
\begin{proof}
  \begin{enumerate}
  \item By induction on $[[T1]]$.
  \item Direct consequence of 1.
  \item From $[[Cons(H,R,G)]]$ we have $[[SAT(H,R,G)]]$ which implies $[[ |= [R][G] ]]$.
    We now proceed by induction on the shape of $[[T]]$.
    \begin{eqncase}{
        [[T = {nu:int |ph}]] & [[T' = {nu:int|ph'}]] \\
        [[|= [G] /\ ph ==> ph']] & [[ |= [R][v/nu]ph ]]
      }
      We must show that $[[ |= [R][v/nu]ph' ]]$.
      From $[[ |= [G] /\ ph ==> ph' ]]$ we must have
      $[[ |= [R][G] /\ [R][v/nu]ph ==> [R][v/nu]ph' ]]$, whence the result is immediate.
    \end{eqncase}
    
    \begin{eqncase}{
        [[T = Tp ref r]] & [[T' = Tp' ref r]]
      }
      If $[[r = 0]]$ then the result is immediate, otherwise
      the result follows from the induction hypothesis.
    \end{eqncase}
  \item Immediate consequence of 2 and that
    $[[ G <: G' ]]$ implies that $[[G |- G(x) <: G'(x)]]$ for any $[[x in G']]$.
  \item Immediate from 2 and 4.
  \end{enumerate}
\end{proof}

\begin{lemma}[Substitution]
  \label{lem:substitution}
  If $\funenv \mid \tenv\mid \beta\vdash e \COL \tau  \produces \tenv'$, we can obtain
  $\funenv \mid [x'/x]\tenv \mid \beta \vdash [x'/x]e \COL [x'/x]\tau \produces [x'/x]\tenv'$.
\end{lemma}
\begin{proof}
  By straightforward induction of typing rules.
\end{proof}

\begin{lemma}\label{lem:ctxt-sub-distribute}
  $[[ T3 = T1 + T2  ==> [B/A]T3 = [B/A]T1 + [B/A]T2 ]]$
\end{lemma}
\begin{proof}
  By straightforward cases analysis on the definition of $[[ T1 + T2 ]]$.
\end{proof}

\begin{lemma}\label{lem:ctxt-sub-wf}
  For any $[[ ll ]]$:
  \begin{enumerate}
  \item $[[ A |- G ==> ll |- [ll / A]G]]$
  \item $[[ G | A |- T ==> [ll/A]G | ll |- [ll/A]T]]$
  \item $[[ A |- T => G ==> ll |- [ll/A] T => [ll/A]G ]]$
  \end{enumerate}
\end{lemma}
\begin{proof}
  Observe that for any substitution $[[ [ll/A] ]]$, $[[ST([ll/A]G) = ST(G)]]$,
  so it suffices to show that $[[ FPCV ( [ll/A]ph ) ]] \subseteq [[CV(ll)]] = \emptyset$
  for any refinement $[[ph]]$ appearing in $[[T]]$ or a type in $[[G]]$.

  By the assumed well-formedness of $[[T]]$ with respect to context
  variable $[[A]]$ (resp. $[[G]]$), after substitution all free
  context variables in $[[T]]$ (resp. the types in $[[G]]$) will be
  replaced with $[[ll]]$. Thus, post-substitution no free context
  variables appear in the refinement of $[[ [ll/A] T]]$ (resp. refinements of
  types in $[[ [ll/A] G]]$), trivially satisfying our requirement.
\end{proof}

\begin{lemma}
  \label{lem:ctxt-sub-subtype}
  For any $[[G]]$, $[[T1]]$, $[[T2]]$, $[[A]]$ and $[[B]]$, $[[ G |- T1 <: T2 ==> [B/A]G |- [B/A]T1 <: [B/A]T2 ]]$.
\end{lemma}
\begin{proof}
  If $[[A]]$ does not appear free in $[[T1]]$, $[[T2]]$ or $[[G]]$, then the result trivially holds. Let us then assume
  $[[A]]$ appear free. We prove the result by induction on the subtyping derivation.

  \begin{rneqncase}{Sub-Ref}{
      [[ T1 = T1' ref r1 ]] & [[ T2 = T2' ref r2 ]] \\
      [[ [B/A] T1 = ([B/A]T1') ref r2 ]] & [[ [B/A]T2 = ([B/A]T2') ref r2 ]] \\
      [[  r2 > 0 ==> G |- T1' <: T2' ]]
    }
    If $[[ r2 = 0 ]]$ then the result trivially holds. If not, we must show that $[[ [B/A]G |- [B/A]T1' <: [B/A]T2' ]]$
    which holds immediately from the induction hypothesis.
  \end{rneqncase}

  \begin{rneqncase}{Sub-Int}{
      [[ T1 = {nu:int|ph1} ]] & [[ T2 = {nu:int|ph2} ]] \\
      [[ [B/A]T1 = {nu:int|[B/A]ph1 } ]] & [[ [B/A]T2 = {nu:int|[B/A]ph2 } ]] \\
      [[ G |= ph1 ==> ph2 ]]
    }
    We must show that $[[ [B/A]G |= [B/A]ph1 ==> [B/A]ph2 ]]$, i.e. $[[ |= [ [B/A]G ] /\ [B/A]ph1 ==> [B/A]ph2 ]]$.
    From our assumption that $[[ G |= ph1 ==> ph2 ]]$ we have that $[[ |= [ G ] /\ ph1 ==> ph2 ]]$ is valid,
    whence the formula $[[ [ G ] /\ ph1 ==> ph2 ]]$ is true for any possible valuation of the free context
    variable $[[A]]$. Thus the formula $[[ [ [B/A]G ] /\ [B/A]ph1 ==> [B/A]ph2 ]]$ must also be valid.
  \end{rneqncase}
\end{proof}

\begin{lemma}
  \label{lem:ctxt-subst-well-typed}
  \begin{align*}
    & [[ Th | G | A |- e : T => G' ]] \Longrightarrow\\
    & [[ Th | [ ll / A ] G | ll |- e : [ ll / A ] T => [ ll / A ] G' ]]
  \end{align*}
\end{lemma}
\begin{proof}
  By induction on the typing derivation $[[ Th | G | A |- e : T => G' ]]$. In the following
  analysis, we will freely use the identity $[[([B/A]G) \ x = [B/A](G \ x)]]$.
  \begin{rneqncase}{T-Var}{
      [[e = x]] & [[T = T2]] \\
      [[G = G0[x : T1 + T2] ]] & [[ G' = G0[x <- T2] ]]
    }
    By application of \cref{lem:ctxt-sub-distribute}.
  \end{rneqncase}
  \begin{rneqncase}{T-LetInt}{
      [[e = let x = nn in e']] & [[ Th | G, x:{nu:int|nu = nn} | A |- e' : T => G'' ]] \\
      [[ G' = G'' \ x ]] &
    }
    The induction hypothesis gives
    \[
      [[ Th | [ll/A]G, x:{nu:int|nu=nn} | ll |- e : [ll/A]T => [ll/A]G'' ]]
    \]
    \cref{lem:ctxt-sub-wf} gives $[[ ll |- [ll/A]T => [ll/A](G'' \ x) ]]$, from which we
    conclude $[[ Th | [ll/A]G | ll |- let x = nn in e : [ll/A]T => [ll/A](G'' \ x) ]]$
    as required.
  \end{rneqncase}

  \begin{rneqncase}{T-Let}{
      & [[e = let x = y in e']] & [[ G' = G'' \ x ]] \\
      & [[ Th | G1 | A |- e' : T => G'' ]] & [[ G1 = G[y <- (T1 /\ y y = T1 x)], x:(T2 /\ x x = T2 y)]] \\
      & [[ G = G0[y: T1 + T2]  ]]
    }
    By \cref{lem:ctxt-sub-distribute},
    $[[ ([ll/A]G)(y) = [ll/A](T1 + T2) = ([ll/A]T1 + [ll/A]T2) ]]$. We must then
    show that $[[ Th | G1' | ll |- e : [ll/A]T => [ll/A]G'' ]]$
    where
    \[
      [[ G1' = ([ll/A]G)[y <- [ll/A]T1 /\ y y = x ],x:([ll/A]T2 /\ x x = y) ]]
    \]
    As $[[G1' = [ll/A]G1]]$ the induction hypothesis gives the required typing judgment.
    That $[[ll |- [ll/A]T => [ll/A]G'' ]]$ follows from \cref{lem:ctxt-sub-wf} as in the \rn{T-LetInt}
    case.
  \end{rneqncase}

  \begin{rncase}{T-If,T-Seq}
    By trivial application of the inductive hypothesis.
  \end{rncase}

  \begin{rncase}{T-MkRef,T-Deref}
    By reasoning similar to \rn{T-Let}.
  \end{rncase}

  \begin{rneqncase}{T-Call}{
      [[ vsub = [y1/x1] ,, [yn/xn] ]] \\
      [[ csub = [l:A/A'] ]] \\
      [[ Th | G1 | A |- e : T => G2 ]] \\ [[ G' = G2 \ y ]] \\
      [[ A |- T => G2 \ y  ]] \\
      [[ Th(f) = A' < x1 : T1 ,, xn : Tn > -> <x1: T1' ,, xn : Tn' | T' > ]]  \\
      [[ G1 = G[yi <- csub vsub Ti'], x : csub vsub T' ]]
    }
    We must first show that for $[[ csub' = [l:ll/A'] ]]$:
    \[
      [[  Th | G3 | ll |- e : [ll/A]T => [ll/A]G2 ]]
    \]
    where $[[ G3 = ([ll/A]G)[yi <- csub' vsub Ti'], x: csub' vsub T']]$.

    We first observe that $[[ G3 = [ll/A]G1 ]]$ (this follows from the
    equivalence of $[[ [ll/A][l:A/A'] ]]$ and
    $[[ [l:ll / A'] ]]$) whence the induction hypothesis
    gives the required typing derivation.

    We must also show that
    $\forall i \in \set{1..n}.[[([l:ll/A]G)(yi) = csub' vsub Ti]]$.
    From the assumed well-typing of the term under $[[A]]$ we have
    that $\forall i \in\set{1..n}.[[csub G(yi) = csub vsub Ti]]$. Recall
    that $[[csub']]$ is equivalent to $[[ [ll/A] csub ]]$, whence we have
    $[[ [ll/A] csub G(yi) = [ll/A] csub vsub Ti]]$ for any $[[i]]$ as
    equality is preserved by consistent substitution.

    That $[[ ll |- [ll/A]T => [ll/A](G2 \ y) ]]$ holds from application of
    \cref{lem:ctxt-sub-wf}.
  \end{rneqncase}

  \begin{rncase}{T-Assign,T-Alias}
    By the inductive hypothesis and application of \cref{lem:ctxt-sub-distribute}.
  \end{rncase}

  \begin{rneqncase}{T-Sub}{
      [[ Th | G1 | A |- e : T1 => G2 ]] & [[ G <: G1 ]] \\
      [[ G2, x : T1 <: G',x : T ]] & [[ Th | G | A |- e : T => G' ]]
    }
    By the induction hypothesis we have that: $[[ Th | [ll/A]G1 | ll |- e : [ll/A]T1 => [ll/A]G2 ]]$.
    If we show that $[[ [ll/A]G <: [ll/A]G1 ]]$ and $[[ [ll/A]G2, x : [ll/A]T1 <: [ll/A]G', x : [ll/A]T ]]$
    ($[[ x not in G ]]$)
    we will have the required result. To show the first requirement, for any $[[ x in G ]]$ we have that
    $[[ [ll/A]G |- [ll/A]G(x) <: [ll/A]G1(x) ]]$ from \cref{lem:ctxt-sub-subtype} whence we have $[[ [ll/A]G <: [ll/A]G1 ]]$.
    To show the latter requirement, we observe that $[[ [ll/A]G2, x : [ll/A]T1 ]]$ is equivalent to $[[ [ll/A](G2, x : T1) ]]$ and
    similarly for $[[G']]$ and $[[T]]$ whence we have the required subtyping relationship from the application of \cref{lem:ctxt-sub-subtype}.
  \end{rneqncase}
\end{proof}

\begin{lemma}
  \label{lem:ectxt-sub-well-typed}
  If, for some $[[G]]$,
  $[[ Th | [] : T => G' | B |-e E : T'' => G'']]$ and $[[Th | G | B |- e : T => G' ]]$
  then
  $[[ Th | G | B |- E[e] : T'' => G'' ]]$.
\end{lemma}
\begin{proof}
  By induction on the typing derivation of $[[E]]$.
  \begin{rneqncase}{TE-Seq}{
      [[ E ]] = [[ E'; e' ]] \\ [[ E[e] = E'[e]; e' ]] \\
      [[ Th | [] : T => G' | B |-e E' : T0 => G0 ]] & [[ Th | G0 | B |- e' : T'' => G'' ]]
    }
    By the induction hypothesis we have $[[ Th | G | B |- E'[e] : T0 => G0 ]]$. Combined
    with the assumption $[[ Th | G0 | B |- e' : T'' => G'' ]]$ the result holds
    via application of the proof rule \rn{T-Seq}.
  \end{rneqncase}
  \begin{rncase}{TE-Hole}
    Trivial.
  \end{rncase}
\end{proof}

\begin{lemma}
  \label{lem:stack-well-typed}
  For any $[[G0]]$ such that $[[Th | G0 | l:ll |- x: T => G]]$ and $[[ Th | [] : T => G | ll |-e E[let y = [] l in e] : T' => G' ]]$ then
  $[[ Th | G0 | ll |- E[let y = [] l in e][x] : T' => G' ]]$
\end{lemma}
\begin{proof}
  It suffices to show that $[[ Th | G0 | ll |- let y = x in e : T1 => G1]]$
  and $[[ Th | [] : T1 => G1 | ll |-e E : T' => G']]$
  whence the result will hold from \cref{lem:ectxt-sub-well-typed}.

  By inversion on
  $[[ Th | [] : T => G | ll |-e E[let y = [] l in e] : T' => G' ]]$ we have
  \begin{align}
    & [[ Th | G, y: T | ll |- e : T2 => G2 ]] \label{eqn:let-body-ty} \\
    & [[ Th | []: T2 => G2 \ y | B |-e E : T' => G' ]] \label{eqn:ctxt-typed}\\
    & [[ ll |- T2 => G2 ]] \label{eqn:t2g2-wf} \\
    & [[ y not in dom G2 ]] \label{eqn:y-not-free-var}
  \end{align}
  By \cref{lem:inversion}, from $[[ Th | G0 | l:ll |- x : T => G ]]$ we conclude there
  exists some $[[Gp]]$, $[[Tp]]$, and $[[Gp']]$ such:
  \begin{align}
    & [[G0 <: Gp]] \label{eqn:in-sub} \\
    & [[Gp',Tp <: G,T]] \label{eqn:out-sub} \\
    & [[Gp' = Gp[x <- Tp'] ]] \label{eqn:gp-up-def} \\
    & [[Gp(x) = Tp + Tp' ]] \label{eqn:gp-x-def}
  \end{align}
  
  We take $[[ G1 = G2 \ y ]]$, $[[ T2 = T1 ]]$, and then \cref{eqn:ctxt-typed}
  gives the necessary typing for $[[E]]$. To show that
  \[
    [[ Th | G0 | ll |- let y = x in e : T1 => G1 ]]
  \]
  we apply \rn{T-Sub} with $[[ G0 <: Gp ]]$ from \cref{eqn:in-sub} above, so it remains to show
  \[
    [[ Th | Gp[x: Tp + Tp'] | ll |- let y = x in e : T1 => G1 ]]
  \]
  which, by \rn{T-Let} holds if we show that:
  \[
    [[ Th | Gp[x <- Tp' /\ x x = Tp' y],y: Tp /\ y y = Tp x | ll |- e : T2 => G2 ]]
  \]
  (that $[[ ll |- T2 => G2 \ y]]$ follows from \cref{eqn:t2g2-wf,eqn:y-not-free-var} above).
  
  If necessary, we can first apply \rn{T-Sub} to weaken the type environment to:
  \[
    [[ Th | Gp[x <- Tp'],y: Tp | ll |- e : T1 => G1 ]]
  \]
  From \cref{eqn:out-sub} above, we have that $[[ Gp[x <- Tp'],y : Tp <: G,y:T ]]$, whereby one
  final application of \rn{T-Sub} allows us to use to \cref{eqn:let-body-ty} above.
  
\end{proof}

\begin{lemma}
  \label{lem:stack_var}
  For any $[[E]]$ and $[[e']]$ such that $[[E[e'] = e]]$ where
  $[[Th | G | B |- e : T => G']]$ there exists some $[[T0]]$, $[[G0]]$ such that
  $[[Th | []: T0 => G0 | B |-e E : T => G' ]]$ and
  $[[Th | G | B |- e' : T0 => G0]]$.
\end{lemma}
\begin{proof}
  By induction on the structure of $[[E]]$.
  \begin{rncase}{E-Hole}
    Trivial, by taking $[[T1 = T]]$ and $[[G' = G1]]$.
  \end{rncase}
  \begin{rncase}{E-Seq}
    Then $[[E = E'; e'']]$ and $[[E[e'] = E'[e']; e'' = e]]$, whence
    $[[e = e1; e2]]$ where $[[E'[e'] = e1]]$ and $[[e'' = e2]]$. By
    inversion on the typing derivation of $[[e]]$ we have
    $[[ Th | G | B |- e1 : T1 => G1]]$,
    $[[Th | G1 | B |- e2: T => G']]$. By the induction hypothesis
    we then have $[[ Th | G | B |- e' : T0 => G0 ]]$ and
    $[[ Th | []: T0 => G0 | B |-e E' : T1 => G1 ]]$. Exploiting the equality
    between $[[e2 = e'']]$, we use the proof rule \rn{TE-Seq}
    to conclude $[[ Th | []: T0 => G0 | B |-e E'; e'' : T => G']]$.
  \end{rncase}
\end{proof}

\begin{lemma}[Environment Weakening]
  \label{lem:tyenv-weaken}
  Define the partial operation $[[G1 + G2]]$ for two environments such $[[dom G1 /\ dom G2 = null]]$:
  \[
    [[(G1 + G2)(x)]] = \begin{cases}
      [[G1(x)]] & [[ x in dom G1 ]] \\
      [[G2(x)]] & [[ x in dom G2 ]] \\
      \textit{undef} & o.w.
    \end{cases}
  \]
  
  Then, for any $[[G]]$ and $[[ G'' ]]$ where $[[ dom G /\ dom G'' = null ]]$:
  \begin{enumerate}
  \item $[[ G |- T1 <: T2 ==> G + G'' |- T1 <: T2 ]]$
  \item $[[G <: G' ==> G + G'' <: G' + G'']]$
  \item If $[[ Th | G | B |- e : T => G' ]]$, $[[ B |- G + G' ]]$ and $[[ B |- G' + G'']]$, then $[[ Th | G + G'' | B |- e : T => G'' + G]]$
  \end{enumerate}
\end{lemma}
\begin{proof}
  \begin{enumerate}
  \item As in the proof of \cref{lem:ctxt-sub-subtype}, at the root of
    the subtyping derivation is a logical judgment of the form
    $[[ |= [ G ] /\ ph1 ==> ph2 ]]$ which can be shown to be valid. We
    must then show that $[[ |= [ G + G'' ] /\ ph1 ==> ph2 ]]$ is valid. As
    $[[ [ G'' + G] /\ ph1 = [G''] /\ [G] /\ ph ]]$ only strengthens the pre-condition
    $[[ [ G ] /\ ph1 ]]$, $[[ |= [ G''  + G] /\ ph1 ==> ph2 ]]$ must
    also be valid.
  \item It suffices to show that $[[G'' |- G''(x) <: G'''(x)]]$ for
    any arbitrary $[[x]]$. If $[[x in G']]$ then by we must have
    $[[ G |- G(x) = G''(x) <: G'''(x) = G'(x) ]]$, whence $[[ G'' |- G''(x) <: G'''(x) ]]$ from
    part 1.

    If $[[ x not in G' ]]$, then $[[empty |- G''(x) <: G'''(x)]]$ and the result holds
    again from part 1.
  \item By straightforward induction on the typing derivation of
    $[[ Th | G | B |- e : T => G' ]]$. We assume that the variables bound in
    any let expressions that appear within $[[e]]$ are not in the domain
    of $[[G'']]$; this requirement can be easily enforced with
    consistent renaming. The only interesting cases are
    \rn{T-Sub} and \rn{T-Assert};  the other cases follow from the induction hypothesis.
    
    Notice that for the cases with let bindings, to use the inductive
    hypothesis we must show that $[[ B |- G + G'', x: T' ]]$ and $[[ B |- G' + G'',x : T'' ]]$
    for some $[[T']], [[T'']]$ and where $[[x]]$ is the variable being bound.
    
    The former follows from that $[[ G | B |- T' ]]$ for any type $[[T']]$ bound by a let
    expression, and that $[[ dom G <= dom G + G'' ]]$.
    The latter follows from $[[ B |- T => G',x:T'' ]]$
    (by \cref{lem:type-result-wf}) and $[[ B |- G' + G'' ]]$.

    We now turn to the remaining two relevant cases.

    \begin{rneqncase}{T-Sub}{
        [[ G <: G3 ]] & [[ Th | G3 | B |- e : T2 => G4 ]] \\
        [[ G4,T2 <: G',T ]] & [[ B |- G3 ]] \\
        [[ B |- T => G' ]]
      }
      From the rules for subtyping, we must have
      $[[ dom G3 <= dom G ]]$ and $[[ dom G' <= dom G4 ]]$. A simple inductive argument
      gives that $[[ dom G4 <= dom G3 ]]$, therefore we have $[[ dom G3 <= dom G' ]]$.
      Let $\mathcal{LV}$ be the set of free variables in the refinements of $[[G'']]$
      that are not in the domain of $[[G'']]$. From the assumed well-formedness of
      $[[ B |- G' + G'' ]]$, we must have that
      $\forall x \in \mathcal{LV}.[[x in dom G' /\ [S G'(x) ] = int ]]$. Thus,
      $\mathcal{LV} \subseteq [[G3]] [[/\]] \mathcal{LV} \subseteq [[G4]]$. Further, by definition,
      if $[[ Gi <: Gj ]]$, then $[[forall x in dom Gj. [S Gj(x)] = [S Gi(x)] ]]$ for
      any environments $[[Gi]], [[Gj]]$. We conclude that $[[ B |- G3 + G'' ]]$ and
      $[[ B |- G4 + G'']]$, whereby the inductive hypothesis gives
      $[[ Th | G3 + G'' | B |- e : T2 => G4 + G'' ]]$. To prove the overall result, we must
      show that $[[ G + G'' <: G3 + G'' ]]$ and $[[ G4 + G'',T2 <: G' + G'',T ]]$
      which follow from parts 1 and 2 above.
    \end{rneqncase}
    \begin{rncase}{T-Assert}
      We must show that $[[ |= [G'' + G] ==> ph ]]$ which is equivalent to
      $[[ |= [G''] /\ [G] ==> ph ]]$. As the source term was well typed,
      $[[ |= [G] ==> ph ]]$ is valid, we must then have $[[ |= [G''] /\ [G] ==> ph ]]$
      whereby the inductive hypothesis gives the required result.
    \end{rncase}
  \end{enumerate}
\end{proof}

\begin{lemma}
  \label{lem:callfunc}
  Let $[[ E[let x = f l (y1,,yn) in e'] ]]$ be a term such that:
  
  \begin{bcpcasearray}
    [[ Th | G0 | ll |- let x = f l (y1,,yn) in e' : T1 => G1 ]] &  [[ csub = [l:ll/A] ]] \\
    [[ Th | [] : T1 => G1 | ll |-e E : T2 => G2 ]] & [[ vsub = [y1/x1],,[yn/xn] ]] \\
    [[ f |-> ( x1, .. ,xn) e' in D]] & [[ Th |- f |-> (x1,..,xn) e ]] \\
    [[ ll |- G0 ]] &  [[ |- Th ]]
  \end{bcpcasearray}

  where $[[Th(f) = A < x1 : T1 ,, xn: Tn> -> <x1: T1',,xn:Tn' | Tq >]]$.

  Then there exists some $[[T3]]$ and $[[G3]]$:
  \begin{align*}
    & [[ Th | G0 | l:ll |- vsub e : T3 => G3 ]] \\
    & [[ Th | [] : T3 => G3 | ll |-e E[let x = [] l in e] : T2 => G2 ]]
  \end{align*}
\end{lemma}
\begin{proof}
  From \cref{lem:inversion} on
  $[[ Th | G0 | ll |- let x = f l (y1,,yn) in e' : T1 => G1 ]]$ we have, for some
  $[[ Gp ]], [[Tp]], [[Gp']]$, that:
  \begin{align}
    & [[ G0 <: Gp /\ Gp',Tp <: G1,T1 ]] \\
    & [[ Gp(yi) = csub vsub Ti ]] \label{eqn:arg-typed} \\
    & [[ Gp' = Gp0 \ x ]] \\
    & [[ Th | Gp[yi <- csub vsub Ti'],x: csub vsub Tq | ll |- e' : Tp => Gp0 ]] \label{eqn:let-body-well-typed} \\
    & [[ ll |- Tp => Gp0 \ x ]]
    & [[ ll |- Gp ]] \label{eqn:sub-in-env-wf} \\
  \end{align}
  
  To prove the first part, from the well-typing of the function body, we have
  $[[ Th | x1:T1,,xn:Tn | A |- e : Tq => x1:T1',,xn:Tn' ]]$.
  By $n$ applications of the substitution lemma we have:
  $[[ Th | y1:vsub T1,,yn:vsub Tn | A |- vsub e : vsub Tq => y1:vsub T1',,yn:vsub Tn']]$.
  By \cref{lem:ctxt-subst-well-typed} we then have
  $[[ Th | y1:csub vsub T1,,yn:csub vsub Tn | l:ll |- vsub e : csub vsub Tq => y1:csub vsub T1',,yn:csub vsub Tn']]$.
  We take $[[T3 = csub vsub Tq ]]$ and $[[ G3 = Gp[yi <- csub vsub Ti'] ]]$,
  By the well-formedness of function types, we must have that $[[ ll |- G3 ]]$
  and by \cref{eqn:arg-typed,eqn:sub-in-env-wf,lem:tyenv-weaken} we have
  $[[ Th | Gp | l:ll |- vsub e : T3 => G3 ]]$, whence an application of \rn{T-Sub}
  using $[[ G0 <: Gp ]]$ gives $[[ Th | G0 | l:ll |- vsub e : T3 => G3 ]]$
  gives the first result.

  To prove the second part, from the typing rule for \rn{TE-Stack} we must show:
  \begin{align}
    & [[ Th | [] : T1 => G1 | ll |-e E : T2 => G2]] \label{eqn:context-well-typed} \\
    & [[ Th | G3, x: T3 | ll |- e' : T1 => G1 ]] \label{eqn:let-body-sub-typed} \\
    & [[ ll |- T1 => G1 ]] \label{eqn:t1g1-wf} \\
    & [[ x not in dom G1 ]] \label{eqn:x-not-free}
  \end{align}
  \cref{eqn:t1g1-wf} follows from the well-typing of the function call
  and \cref{lem:type-result-wf}, and \cref{eqn:context-well-typed} is
  by assumption. From $[[ ll |- Tp => Gp0 \x ]]$,
  \cref{eqn:let-body-well-typed}, and
  \cref{lem:well-formed-rem-subtype}, we have
  $[[ Th | G3, x :T3 | ll |- e' : Tp => Gp' ]]$ by application of
  \rn{T-Sub}. Then, from $[[ Gp',Tp <: G1,T1 ]]$ we have
  $[[ Th | G3, x: T3 | ll |- e' : T1 => G1 ]]$ with a final
  application of \rn{T-Sub}.

  Finally, \cref{eqn:x-not-free} holds as, by definition $[[ x not in dom Gp' ]]$
  and $[[ Gp' <: G1 ==> dom G1 <= dom Gp' ]]$.
\end{proof}

\begin{lemma}
  \label{lem:type-result-wf}
  If $[[ B |- G ]]$ and $[[ Th | G | B |- e : T => G' ]]$ then $[[ B |- T => G' ]]$.
\end{lemma}
\begin{proof}
  By induction on the typing derivation of $[[e]]$; in the following we say ``well-formedness'' to mean ``refinement well-formedness''.
  \begin{namedcase}{\casefont{Cases \rn{T-LetInt}, \rn{T-Let}, \rn{T-Mkref}, \rn{T-Deref}, \rn{T-Call}, and \rn{T-Sub}: }}
    Immediate from the precondition of the typing rule.
  \end{namedcase}
  \begin{namedcase}{\casefont{Cases \rn{T-Seq} and \rn{T-Assert}}}
    From the inductive hypothesis
  \end{namedcase}
  \begin{rncase}{T-If}
    From the assumed well-formedness of $[[G(x)]]$ we must have that
    $[[G(x) /\ x x = 0]]$ is well-formed (and similarly for
    $[[x != 0]]$, and thus the inductive hypothesis gives the desired
    result.
  \end{rncase}

  \begin{rncase}{T-Alias,T-AliasPtr}
    From the assumed well-formedness of $[[T1 ref r1]]$ and $[[T2 ref r2]]$, we have that
    $[[ T1 ref r1 + T2 ref r2 ]]$ is well-formed, and thus from the definition of $[[~]]$
    $[[ T2' ref r2' ]]$ and $[[ T1' ref r1']]$ are well-formed. Then the IH gives us the desired
    result.
  \end{rncase}

  \begin{rncase}{T-Assign}
    From the assumed well formedness of $[[T1 + T2]]$ we have that
    $[[ T1 /\ y y = T1 x ]]$ is well formed (as $[[x]]$ must be bound
    in $[[G]]$ and so is $[[T2]]$. Then the inductive hypothesis gives
    the desired result.
  \end{rncase}

  \begin{rncase}{T-Var}
    From the assumed well-formedness of $[[ T1 + T2 ]]$, $[[ B |- T2 => G[x <- T1] ]]$
    is clearly well-formed.
  \end{rncase}
\end{proof}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: t
%%% End:
