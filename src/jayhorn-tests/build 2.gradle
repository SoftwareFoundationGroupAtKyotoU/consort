import org.apache.tools.ant.taskdefs.condition.Os

//install the commit hook if possible.
def hook_folder = new File('./.git/hooks')
def hook = new File('pre-commit.sh')
def hook_windows = new File('pre-commit.cmd')
def installed_hook = new File('./.git/hooks/pre-commit')

if (Os.isFamily(Os.FAMILY_WINDOWS)) {
 println("Installing pre-commit hook for WINDOWS")
 if (hook_windows.exists() && hook_folder.exists() && !installed_hook.exists()) {
  exec {
   commandLine 'cmd', '/c', 'copy', hook_windows.getAbsolutePath(), installed_hook.getAbsolutePath()
  }  
 }
} else {
 println("Installing pre-commit hook for Unix/OS X")
 if (hook.exists() && hook_folder.exists() && !installed_hook.exists()) {
  exec {
   workingDir '.'
   commandLine 'cp', hook, installed_hook
  }  
 } 
}

buildscript {
	repositories {
		mavenCentral()
		maven {
			url "https://maven.eveoh.nl/content/repositories/releases"            
		}        
	}

	dependencies {
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
	}
}



allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
	apply plugin: 'com.github.kt3k.coveralls'
	
    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = '0.7.1.201405082137'
    }
}

subprojects {
    apply plugin: 'java'
	apply plugin: 'jacoco'
	apply plugin: 'eclipse'
	apply plugin: 'com.github.kt3k.coveralls'
	apply plugin: 'findbugs'
	apply plugin: 'jdepend'
	//apply plugin: 'checkstyle'

	tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
        //options.compilerArgs << "-Werror"
    }
	
	// testing related activities -----------------
	tasks.withType(FindBugs) {
		effort = "default"
		reportLevel = "medium"

        // Excluding tests generated by Randoop

        exclude '**/jayhorn.test.randoop_tests/*'
        exclude '**/soottocfg.ast/*'
        classes = classes.filter {
            !it.path.contains(new File("jayhorn/test/randoop_tests/").path) && !it.path.contains(new File("soottocfg/ast/").path)
        }

		reports {
			xml.enabled = false
			html.enabled = true
		}
	 }

	jacocoTestReport {
		additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
		reports {
			xml.enabled true
			html.enabled true
			csv.enabled false
			html.destination "${buildDir}/reports/coverage"
		}
	}

	test {
		jacoco {
			enabled = true
		}

		testLogging {
			events "failed"
			exceptionFormat "full"
		}

		useJUnit()
	}
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
	onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

coveralls {
  sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'

  dependsOn jacocoRootReport
}

project(':jayhorn') {
    dependencies {
        compile project(':soottocfg')
    }
}

project(':soottocfg') {
 
}