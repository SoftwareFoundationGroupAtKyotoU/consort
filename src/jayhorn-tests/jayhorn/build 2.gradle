def z3LibPath = 'native_lib'
def File nativeLibFile = file(z3LibPath)

//global properties
def version = '0.7'
jar.archiveName = 'jayhorn.jar'


compileJava.options.fork = true

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

tasks.withType(Test) {
  systemProperty  'java.library.path', nativeLibFile.absolutePath
}

configurations{
    common
}

repositories {
    mavenCentral()
    maven {
          url "http://logicrunch.research.it.uu.se/maven/"
    }        
}

dependencies {    
    compile 'args4j:args4j:2.32'    
    compile 'log4j:log4j:1.2.17'
    compile 'com.google.code.findbugs:annotations:3.0.0'
    compile fileTree(dir: 'lib', include: '*.jar')
    compile project(':soottocfg')
    compile 'uuverifiers:eldarica_2.11:2.0.2'
    testCompile "junit:junit:4.12"  // Or whatever version
    testCompile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
}


//Add native dependency for Z3 to eclipse project.
eclipse.classpath.file.withXml {
  provider -> 
    provider.asNode().findAll { it.@path.contains("JRE_CONTAINER") }.each { 
      def attr = it.appendNode('attributes', [])
      attr.appendNode('attribute', [name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value:nativeLibFile.absolutePath])
  }
}

// building the jar ---------------------
jar {

    manifest {
        attributes 'Main-Class': "jayhorn.Main",
                   'Class-Path': '.',
                   'Implementation-Title': 'JayHorn',
                   'Implementation-Version': "$version"
    }

    from('src/main/resources'){ include('log4j.properties')}

    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

task createRunScript {
    description 'Create run script to run from same directory as jayhorn.jar. Can be packaged up with jayhorn.jar when distributing the tool'
    doLast {
        new File("build/libs/jayhorn").text = """#!/bin/bash

# parse arguments
BENCHMARK=""
PROPERTY_FILE=""
WITNESS_FILE=""

while [ -n "\$1" ] ; do
  case "\$1" in
    --propertyfile) PROPERTY_FILE="\$2" ; shift 2 ;;
    --graphml-witness) WITNESS_FILE="\$2" ; shift 2 ;;
    --version) java -jar jayhorn.jar -version ; exit 0 ;;
    *) BENCHMARK="\$1" ; shift 1 ;;
  esac
done

# SV-COMP mode (if there is no property file)
# In this mode JayHorn is run from benchexec/tools/jayhorn.py
# (https://github.com/sosy-lab/benchexec)
if [[ "\$PROPERTY_FILE" != "" ]]; then
  LD_LIBRARY_PATH=`pwd`:\$LD_LIBRARY_PATH

  DIR=`mktemp -d -t jayhorn-benchmark.XXXXXX`
  trap "rm -rf \$DIR" EXIT

  # we ignore the property file (there is only one property at the moment)
  # we ignore the witness file (not used yet)
  # we unpack the benchmark zip file, build it and analyze it
  unzip \$BENCHMARK -d \$DIR
  make -C \$DIR
  java -jar jayhorn.jar -j \$DIR/target/classes "\$@"

# normal mode
else
  java -jar jayhorn.jar \$BENCHMARK "\$@"
fi
"""
        project.exec {
            commandLine('chmod',  '+x', '../build/libs/jayhorn')
        }
    }
}
assemble.dependsOn createRunScript

task inferCheck {
  group 'Verification'
  description 'Run Facebook Infer on this project.'

  doLast {
    println("REQUIRES Infer TO BE IN YOUR PATH.")

    exec {
        workingDir '.'
        commandLine 'infer', '--', 'gradle', 'clean', 'compileJava'
    }
  }
}

//exclude integration tests when running regular check
test {
	include '**/regression_tests/**'
    exclude '**/randoop_tests/**'
	exclude '**/integration_tests/**'
	exclude '**/assorted_tests/**'
	exclude '**/soundness/**'
}

task integration_test(type: Test) {
  group 'Verification'
  description 'Run integration tests.'
	enableAssertions = true
	ignoreFailures = true
  maxHeapSize = "1024m"
	include '**/integration_tests/**'
	exclude '**/assorted_tests/**'
	exclude '**/soundness/**'
  include '**/regression_tests/**'
}

task soundness_test(type: Test) {
  group 'Verification'
  description 'Run integration tests.'
	enableAssertions = true
	ignoreFailures = true
	include '**/integration_tests/**'
	exclude '**/assorted_tests/**'
	include '**/soundness/**'
    exclude '**/regression_tests/**'
}

//for philipps run script
task copyDeps(type: Copy) {
  from configurations.runtime
  into 'build/lib'
}
