test_incr_loop(p) {
  let (v,nxt) = *p in {
  ifnull nxt then
    ()
  else {
    let (nxt_v,_) = *nxt in {
	  assert(v <= nxt_v);
	  test_incr_loop(nxt)
	}
  };
  alias(nxt = (*p).1);
  }
}

test_incr(p) {
  let hd = *p in
  ifnull hd then {
    ()
  } else {
    test_incr_loop(hd);
  }
}

insert_loop_incr(x,p) {
  let (v,nxt) = *p in {
  if v < x then {
    ifnull nxt then {
      p := (v,mkref (x, null));
    } else {
      insert_loop_incr(x,nxt);
      alias(nxt = (*p).1);
    }
  } else {
	p := (x, mkref (v, nxt));
  }
  };
}

insert_incr(x, p) {
  let hd = *p in
  ifnull hd then {
    p := mkref (x,null);
  } else {
    insert_loop_incr(x, hd);
	alias(hd = *p)
  }
}

fresh_list() {
  mkref null
}

loop_insert_incr(l) {
  if _ then {
    insert_incr(_, l);
	loop_insert_incr(l)
  } else ()
}

insert_loop_decr(x,p) {
  let (v,nxt) = *p in
  if v > x then {
    ifnull nxt then {
	  p := (v,mkref (x,null))
	} else {
	  insert_loop_decr(x,nxt);
	  alias(nxt = (*p).1)
	}
  } else {
    p := (x, mkref (v,nxt));
  }
}

insert_decr(x,p) {
  let hd = *p in
  ifnull hd then
    p := mkref (x, null)
  else {
    insert_loop_decr(x,hd);
	alias(hd = *p);
  }
}

loop_insert_decr(l) {
  if _ then {
    insert_decr(_,l);
	loop_insert_decr(l)
  } else ()
}

test_decr_loop(p) {
  let (v,nxt) = *p in
  ifnull nxt then ()
  else
    let (nxt_v, _) = *nxt in {
	  assert(v >= nxt_v);
	  test_decr_loop(nxt);
	  alias(nxt = (*p).1);
	}
}

test_decr(p) {
  let hd = *p in
  ifnull hd then
    ()
  else {
  	test_decr_loop(hd)
  }
}

{
 let l = fresh_list () in
 let l2 = fresh_list () in {
   loop_insert_incr(l);
   loop_insert_decr(l2);
   test_incr(l);
   test_decr(l2)
 }
}
