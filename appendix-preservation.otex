
\section{Proof of \Cref{lem:preservation}}
\label{sec:preservation-proof}

We first prove two additional lemmas. 
\Cref{lem:stack-well-typed,lem:callfunc} give key facts used in the return and
call cases respectively; we have separated them into separate lemmas for clarity.

\begin{lemma} % L25
  \label{lem:stack-well-typed}
  For any $[[G0]]$ such that $[[Th | G0 | l:ll |- x: T1 => G1]]$ and $[[ Th | [] : T1 => G1 | ll |-e E[let y = [] l in e] : T2 => G2 ]]$ then
  $[[ Th | G0 | ll |- E[let y = [] l in e][x] : T2 => G2 ]]$.
\end{lemma}
\begin{proof}
  It suffices to show that $[[ Th | G0 | ll |- let y = x in e : T1' => G1']]$
  and $[[ Th | [] : T1' => G1' | ll |-e E : T2 => G2 ]]$ for some $[[ T1' ]]$ and $[[ G1' ]]$
  whence the result will hold from \Cref{lem:ectxt-sub-well-typed}.

  By inversion on
  $[[ Th | [] : T1 => G1 | ll |-e E[let y = [] l in e] : T2 => G2 ]]$ we have
  \begin{align}
    & [[ Th | G1, y: T1 | ll |- e : T1'' => G1'' ]] \label{eqn:let-body-ty} \\
    & [[ Th | []: T1'' => G1'' | B |-e E : T2 => G2 ]] \label{eqn:ctxt-typed} \\
    & [[ ll |- T1'' => G1'' ]] \label{eqn:t2g2-wf} \\
    & [[ y not in dom G1'' ]] \label{eqn:y-not-free-var}
  \end{align}
  We take $[[ G1' = G1'' ]]$, $[[ T1' = T1'' ]]$, and then \Cref{eqn:ctxt-typed}
  gives the necessary typing for $[[E]]$.

  It remains to to show that
  \[
    [[ Th | G0 | ll |- let y = x in e : T1' => G1' ]]
  \]
  
  By \Cref{lem:inversion}, from $[[ Th | G0 | l:ll |- x : T1 => G1 ]]$ we conclude there
  exists some $[[Gp]]$, $[[Tp]]$, and $[[Gp']]$ such:
  \begin{align}
    & [[G0 <: Gp]] \label{eqn:rin-sub} \\
    & [[Gp',Tp <: G1,T1]] \label{eqn:rout-sub} \\
    & [[Gp' = Gp[x <- Tp'] ]] \label{eqn:gp-up-def} \\
    & [[Gp(x) = Tp + Tp' ]] \label{eqn:gp-x-def} \\
    & [[ ll |- Gp ]] \label{eqn:renv-sub-in-wf} \\
    & [[ ll |- T1 => G1 ]] \label{eqn:rout-env-wf}
  \end{align} 

  We first apply \rn{T-Sub} with \Cref{eqn:rin-sub,eqn:renv-sub-in-wf}, so it remains to show
  \[
    [[ Th | Gp[x: Tp + Tp'] | ll |- let y = x in e : T1' => G1' ]]
  \]
  which, by \rn{T-Let} holds if we show that:
  \[
    [[ Th | Gp[x <- Tp' /\ x x = Tp' y],y: Tp /\ y y = Tp x | ll |- e : T1' => G1' ]]
  \]
  ($[[ y not in dom G1' ]]$ follows from \Cref{eqn:y-not-free-var},
  and $[[ ll |- T1' => G1']]$ follows from \Cref{eqn:t2g2-wf}.)
    
  We can first apply \rn{T-Sub} to weaken the type environment to:
  \[
    [[ Th | Gp[x <- Tp'],y: Tp | ll |- e : T1' => G1' ]]
  \]
  From \Cref{eqn:rout-sub} above, we have that $[[ Gp[x <- Tp'],y : Tp <: G1,y:T1 ]]$,
  whereby one final application of \rn{T-Sub} with \Cref{eqn:rout-env-wf}
  allows us to use to \Cref{eqn:let-body-ty} above.
\end{proof}

\begin{lemma} % L28
  \label{lem:callfunc}
  Let $[[ E[let x = f l (y1,,yn) in e'] ]]$ be a term such that:
  
  \begin{bcpcasearray}
    [[ Th | G0 | ll |- let x = f l (y1,,yn) in e' : T1 => G1 ]] &  [[ csub = [l:ll/A] ]] \\
    [[ Th | [] : T1 => G1 | ll |-e E : T2 => G2 ]] & [[ vsub = [y1/x1],,[yn/xn] ]] \\
    [[ f |-> ( x1, .. ,xn) e in D]] & [[ Th |- f |-> (x1,..,xn) e ]] \\
    [[ ll |- G0 ]] &  [[ |- Th ]]
  \end{bcpcasearray}

  where $[[Th(f) = A < x1 : T1 ,, xn: Tn> -> <x1: T1',,xn:Tn' | Tq >]]$.

  Then there exist some $[[T3]]$ and $[[G3]]$:
  \begin{align*}
    & [[ Th | G0 | l:ll |- vsub e : T3 => G3 ]] \\
    & [[ Th | [] : T3 => G3 | ll |-e E[let x = [] l in e] : T2 => G2 ]]
  \end{align*}
\end{lemma}
\begin{proof}
  From \Cref{lem:inversion} on
  $[[ Th | G0 | ll |- let x = f l (y1,,yn) in e' : T1 => G1 ]]$ we have, for some
  $[[ Gp ]], [[Tp]], [[Gp']]$, that:
  \begin{align}
    & [[ G0 <: Gp ]] \label{eqn:in-sub} \\
    & [[ Gp',Tp <: G1,T1 ]] \label{eqn:out-sub} \\
    & [[ Gp(yi) = csub vsub Ti ]] \label{eqn:arg-typed} \\
    & [[ ll |- Gp ]] \label{eqn:sub-in-env-wf} \\
    & [[ Th | Gp[yi <- csub vsub Ti'],x: csub vsub Tq | ll |- e' : Tp => Gp' ]] \label{eqn:let-body-well-typed} \\
    & [[ x not in dom Gp' ]] \label{eqn:cbind-erased}\\
    & [[ ll |- T1 => G1 ]] \label{eqn:out-type-wf}
  \end{align}
  
  To prove the first part, from the well-typing of the function body, we have
  $[[ Th | x1:T1,,xn:Tn | A |- e : Tq => x1:T1',,xn:Tn' ]]$.
  From our assumption that all variable names are distinct,
  by $n$ applications of the substituion lemma (\Cref{lem:substitution}) we have:
  $[[ Th | y1:vsub T1,,yn:vsub Tn | A |- vsub e : vsub Tq => y1:vsub T1',,yn:vsub Tn']]$.
  By \subref{lem:ctxt-substitution}{itm:ctxt-subst-well-typed} we then have
  $[[ Th | y1:csub vsub T1,,yn:csub vsub Tn | l:ll |- vsub e : csub vsub Tq => y1:csub vsub T1',,yn:csub vsub Tn']]$.
  We take $[[T3 = csub vsub Tq ]]$ and $[[ G3 = Gp[yi <- csub vsub Ti'] ]]$.
  
  By the well-formedness of function types and well-formedness of $[[ Gp ]]$,
  we must have that $[[ l:ll |- G3 ]]$.
  Then by \Cref{eqn:arg-typed,eqn:sub-in-env-wf,lem:tyenv-weaken} we have
  $[[ Th | Gp | l:ll |- vsub e : T3 => G3 ]]$, whereby \Cref{eqn:in-sub,eqn:sub-in-env-wf}
  and an application of \rn{T-Sub}
  gives $[[ Th | G0 | l:ll |- vsub e : T3 => G3 ]]$, i.e., the first result.

  To prove the second part, from the typing rule for \rn{TE-Stack} we must show:
  \begin{align}
    & [[ Th | [] : T1 => G1 | ll |-e E : T2 => G2]] \label{eqn:context-well-typed} \\
    & [[ ll |- T1 => G1 ]] \label{eqn:t1g1-wf} \\
    & [[ x not in dom G1 ]] \label{eqn:x-not-free} \\
    & [[ Th | G3, x: T3 | ll |- e' : T1 => G1 ]] \label{eqn:let-body-sub-typed}
  \end{align}
  \Cref{eqn:context-well-typed} holds by assumption, \Cref{eqn:t1g1-wf} follows
  from the inversion lemma above, and \Cref{eqn:x-not-free} follows from \Cref{eqn:cbind-erased} and that $[[ Gp' <: G1 ]]$ implies
  $[[ dom G1 <= dom Gp' ]]$.
  From \Cref{eqn:out-sub,eqn:let-body-well-typed,eqn:out-type-wf} we then have \Cref{eqn:let-body-sub-typed} via an application of \rn{T-Sub}.
\end{proof}

\begin{proof}[\Cref{lem:preservation}]
  The proof is organized by cases analysis on the transition rule used of $[[e]]$, and showing that the output configuration is well typed by
  $[[ |-D ]]$, and for that we must find a $[[G'']]$ that is consistent with $[[H']]$ and $[[R']]$ and also satisfies the other conditions imposed by
  the definition of $[[ |-D ]]$. Here $[[G'']],[[H']], [[R']]$ represent the type environment, heap and register after the transition respectively.
  We identify the heap and register file before transition with $[[H]]$ and $[[R]]$ respectively.
  In order to show that the ownership invariant is preserved, we need to prove that $[[ forall a in H .Own(H,R,G'')(a) <= 1]]$.
  In many cases, we will show that $[[ Own(H, R, G) = Own(H', R', G'') ]]$, whereby
  from the assumption that $[[ forall a in H.Own(H, R, G)(a) <= 1 ]]$ we will
  then have the desired result.
  % FIXED
  \begin{rneqncase}{R-Var}{
    [[ |- D <H, R, CEn-1 : Es, x>]], [[<H, R, CEn-1 : Es, x> --> D <H, R, Es, CEn-1[x]> ]] \\
  }
  By the Inversion on configuration typing $[[ |- D <H, R, CEn-1 : Es, x>]]$, we have:
    \begin{align*}
      & [[ Th | G | ll |- x : Tn => Gn ]] \\
      & \forall i\in\set{1..n}.[[ Th | [] : Ti => Gi | lli-1 |-e CEi-1 : Ti-1 => Gi-1 ]]
    \end{align*}
    
    Using \Cref{lem:stack-well-typed}, we can conclude that $[[ Th | G | lln-1 |- CEn-1[x] : Tn-1 => Gn-1 ]]$. We therefore take $[[ G'' = G ]]$.

    It remains to show that $[[Cons(H,R,G'')]]$ and $[[ lln-1 |- G ]]$, which follows
    immediately from $[[Cons(H,R,G)]]$ and $[[ ll |- G ]]$.
  \end{rneqncase}

  % FIXED
  \begin{rneqncase}{R-Deref}{
      [[ |- D <H, R, Es, E[let x = *y in e]>]] \\
      [[<H, R, Es, E[let x = *y in e]> --> D <H, R { x' |-> v }, Es, E[ [x'/x]e]> ]] \\
      [[ H(a) = v ]] \andalso [[ R(y) = a ]] \andalso [[R' = R { x' |-> v}]]\\
    }
    By inversion on the configuration typing relationship, we have that:
    \begin{align*}
      [[ ll |- G0 ]] && [[ Th | G0 | ll |- E[let x = *y in e] : Tn => Gn ]] \\
      [[ Cons(H,R,G0) ]] &&
    \end{align*}
    By \Cref{lem:stack_var}, we have some $[[T]], [[G0']]$ such that:
    \begin{align*}
      [[ Th | []: T => G0' | ll |-e E : Tn => Gn ]] && [[ Th | G0 | ll |- let x = *y in e : T => G0' ]]
    \end{align*}
    Using \Cref{lem:inversion}, we have some $[[Gp]]$, $[[Gp']]$ and $[[Tp]]$ such
    that:
    
    \begin{bcpcasearray}
      [[ G0 <: Gp ]] \andalso [[ ll |- Gp ]] \andalso [[ Gp',Tp <: G0',T ]] \andalso [[ ll |- T => G0' ]] \\
      [[ Gp(y) = (T1 + T2) ref r ]] \andalso [[ x not in Gp' ]] \\
      [[ Th | Gp[y <- T'' ref r], x : T2 | B |- e : Tp => Gp' ]]  \\
      [[T'' ]] = \begin{cases}
        [[(T1 /\ y y = T1 x)]] & [[ r > 0 ]] \\
        [[T1]] & [[r = 0]]
      \end{cases}
    \end{bcpcasearray}
    
    From \Cref{lem:subtyp-preserves-cons}, we then have $[[Cons(H,R,Gp)]]$.
    We will now show that:
    \begin{align}
      \label{eqn:new-tyenv-cons} & [[Cons(H,R { x' |-> v },G'')]] \\
      \label{eqn:new-tyenv-wf}  & [[ll |- G'']] \\
      & [[Th | G'' | ll |- [x'/x]e : [x'/x]Tp => [x'/x]Gp' ]]
    \end{align}
    where $[[ G'' = Gp[y <- T'' ref r], x' : T2]]$.

    From $[[Th | G'' | ll |- [x'/x]e : [x'/x]Tp => [x'/x]Gp' ]]$ we can
    derive $[[ Th | G'' | ll |- [x'/x]e : T => G0' ]]$.
    From $[[ x not in Gp' ]]$ and $[[ ll |- Tp => Gp' ]]$, we have that
    $[[ [x'/x]Tp = Tp ]]$ and $[[ [x'/x]Gp' = Gp' ]]$. As $[[ Gp',Tp <: G0',T ]]$
    and $[[ ll |- T => G0' ]]$, an application of \rn{T-Sub} gives
    $[[ Th | G'' | ll |- [x'/x]e : T => G0' ]]$.
    
    As $[[E]]$ and the stack $[[Es]]$ remained unchanged, combined with
    \Cref{eqn:new-tyenv-cons,eqn:new-tyenv-wf} this gives
    $[[ |- D <H, R { x' |-> v }, Es, E[ [x'/x]e]> ]]$ as required.
    As the above argument is used almost completely unchanged
    in all of the following cases, we will invert the redex without regard
    for the \rn{T-Sub} rule, with the understanding that the subtyping rule
    is handled with an argument identical to the above.
    
    We now want to show $[[ Th | G'' | ll |- [x'/x]e : [x/x']Tp => [x'/x]G' ]]$,
    $[[ ll |- G'' ]]$, and $[[Cons(H,R { x' |-> v }, G'')]]$.
    The first is easy to obtain using \Cref{lem:substitution} (observe that by \Cref{lem:r-valid-subst} and our
    choice that $[[ x' not in dom R ]]$ we have $[[ x not in dom G ]]$), and the second
    follows almost immediately from $[[ ll |- G ]]$.
    
    It therefore remains to show $[[Cons(H,R { x' |-> v }, G'')]]$. To show that the output environment is consistent, it suffices to show that $[[ SATv(H,R',R'(x'),T2) ]]$
    and $[[SATv(H,R',H(R'(y)),T'') ]]$.
    If $[[ T1 ]]$ is an integer type and $[[r > 0]]$, then
    by the definition of the strengthening operator, the latter is equivalent to show
    that $[[ SATv(H,R',H(R'(y)),T1) ]]$
    and that $[[R'(x')=H(R'(y))=H(R(y))]]$, which is immediate from the definition of $\rn{R-Deref}$.
    If $[[ T1 ]]$ is not an integer or if $[[r = 0]]$,
    then we must only show that $[[ SATv(H,R',H(R'(y)),T1) ]]$.
    
    From $[[Cons(H,R,Gp)]]$, we know that $[[SAT(H,R,Gp)]]$, in particular, $[[SATv(H,R,R(y),Gp(y)) ]] $.
    From \Cref{lem:satadd,lem:r-valid-subst,lem:register} and that $[[ R < R' ]]$, we obtain from
    $[[ SATv(H,R,v,T1+T2)]]$ that $[[ SATv(H,R',v,T1)]]$ and $[[ SATv(H,R',v,T2) ]]$, where $[[v = H(R(y))]]$.
    We thus have that $[[ SATv(H,R',R'(x'),T2) ]]$ and $[[ SATv(H,R',H(R'(y)),T1) ]]$ are satisfied.
    
    We must also show that the ownership invariant is preserved.
    Then, it's to show $[[forall a in H.Own(H,R',G'')(a) <= 1]]$. Define $[[O0']]$ and $[[O1']]$ as follows:
    \begin{align*}
      [[Own(H, R, Gp)]] & = [[O0' + own(H,R(y),Gp(y))]] \\
      [[Own(H, R', G'')]] & =[[O1' + own(H,R'(y),G''(y)) + own(H,R'(x'),G''(x'))]] \\
      [[O0']] &  = [[ |< {z in dom G \ {y}} own(H,R(z),Gp(z))]] \\
      [[O1']] & = [[ |< {z in dom G'' \ {y,x'}} own(H,R'(z'),G''(z')) ]]
    \end{align*}
    By \Cref{lem:heapop}, $[[O0' = O1']]$ holds. Then, it suffices to show that
    $[[ own(H, R(y), Gp(y)) = own(H,R'(y),G''(y)) + own(H,R'(x'),G''(x')) ]]$.
    
    As $[[R'(x')=H(R'(y))=H(R(y))]]$ and from the definition of $[[ G'' ]]$, we have:
    \begin{align*}
      [[ own(H,R'(x'),G''(x')) & = own(H,H(R(y)),T2) ]] \\
      [[ own(H,R'(y),G''(y)) & = {a |-> r} + own(H,H(R(y)),T1) ]] \\
    \end{align*}
    From the definition of the ownership function, we have that
    \[
      [[ own(H,R(y),Gp(y)) = {a |-> r} + own(H,H(R(y)),T1+T2) ]]
    \]
    which, by \Cref{lem:ownadd}, is equivalent to:
    \[
      [[ {a |-> r} + own(H,H(R(y)),T1) + own(H,H(R(y)),T2) ]]
    \]
    We therefore have $[[own(H,R(y),G(y))=own(H,R'(y),G''(y))+ own(H,R'(x'),G''(x'))]]$, and conclude that $[[Own(H, R, G)=Own(H, R', G'')]]$.
  \end{rneqncase} % R-Deref

  \begin{rneqncase}{R-Seq}{
      [[ |- D <H, R, Es, E[x; e]> ]]\\
      [[ <H, R, Es, E[x; e]> --> D <H, R, Es, E[e]> ]]\\
    }
    By inversion (see \rn{R-Deref}) we have for some $[[G]]$ that:
    \begin{align*}
      & [[ Th | G[x : T0 + T1] | ll |- x : T0 => G[x <- T1] ]] \\
      & [[ Th | G[x <- T1] | ll |- e : T' => G' ]] \\
      & [[ Cons(H,R,G) ]] \andalso [[ ll |- G ]]
    \end{align*}
    We take $[[G'' = G[x <- T1] ]]$.
    
    It suffices to show (see \rn{R-Deref})
    that $[[ Th | G'' | ll |- e : T' => G']]$, $[[ ll |- G'' ]]$
    and $[[Cons(H,R, G'')]]$.
    The first is immediate from the inversion above, and $[[ ll |- G[x <- T1] ]]$
    follows from the assumed well-formedness of $[[ ll |- G ]]$. Finally,
    $[[ Cons(H, R, G'') ]]$ follows from \Cref{lem:ownadd,lem:satadd}.
  \end{rneqncase}

  % FIXED
  \begin{rneqncase}{R-Let}{
      [[ |- D <H, R, Es, E[let x = y in e]> ]]\\
      [[<H, R, Es, E[let x = y in e]> --> D <H, R { x' |-> R(y)}, Es, E[ [x'/x]e]> ]]\\
      [[ x' fresh in R ]] \andalso [[R'= R { x' |->  R(y) }]]
    }
    By inversion (see \rn{R-Deref}) we have that for some $[[G]]$ that:
    \begin{align*}
      & [[ G(y) = T1 + T2 ]] \\
      & [[ Th | G [ y <- T1 /\ y y = T1 x  ], x : (T2 /\ x x = T2 y) | ll |- e : T => G']] \\
      & [[Cons(H,R,G)]] \andalso [[ll |- G ]] \andalso [[ ll |- G' ]] \andalso [[ x not in G' ]]
    \end{align*}
    We give $[[G'' = G [ y <- T1 /\ y y = T1 x'  ], x' : (T2 /\ x' x' = T2 y)]]$.
    
    It suffices to show (see \rn{R-Deref})
    that $[[ Th | G'' | ll |- [x'/x]e : T => G' ]]$, $[[ ll |- G'']]$,
    and $[[Cons(H,R { x' |->  R(y) }, G'')]]$.
    The first is easy to obtain using reasoning as in the \rn{R-Deref} casse.
    The second follows from the assumed well-formedness of $[[ T1 ]]$ and $[[ T2 ]]$.
    It therefore remains to show $[[Cons(H,R',G'')]]$.
    
    To show that the output environment is consistent, we must show that $[[SATv(H,R',R'(x'),T2 /\ x' x' = y)]]$ and $[[SATv(H,R',R'(y),T1 /\ y y=x')]]$.
    By reasoning similar to that in $\rn{R-Deref}$, it suffices to show that $[[ SATv(H,R',R'(x'),T2) ]]$ and $[[ SATv(H,R',R'(y),T1) ]]$.
    We know that $[[Cons(H,R,G)]]$, from which me have $[[SAT(H,R,G)]]$, in particular $[[y in R]]$ and $[[SATv(H,R,R(y),G(y))]]$.
    As $[[ R < R']]$, from \Cref{lem:satadd} and \Cref{lem:register}, we obtain from $[[ SATv(H,R,v,T1+T2) ]]$ that
    $[[ SATv(H,R',v,T1)]]$ and $[[ SATv(H,R',v,T2) ]]$ where $v = R(y)$.
    We then have $[[ SATv(H,R',R'(x'),T2) ]]$ and $[[ SATv(H,R',R'(y),T1) ]]$ are satisfied.
    
    We must also show that the ownership invariant is preserved.
    Then, it's to show $[[forall a in H.Own(H,R',G'')(a) <= 1]]$. Define $[[O0']]$ and $[[O1']]$ as follows:
    \begin{align*}
    [[Own(H,R,G)]] & = [[O0' + own(H,R(y),G(y))]] \\ 
    [[Own(H, R', G'')]] & = [[O1' + own(H,R'(y),G''(y)) + own(H,R'(x'),G''(x'))]] \\
    [[O0']] & = [[ |< {z in dom G \ {y}} own(H,R(z),G(z)) ]] \\
    [[O1']] & = [[ |< {z in dom G'' \ {y,x'}} own(H,R'(z'),G''(z'))]]
    \end{align*}
    By \Cref{lem:heapop}, $[[O0' = O1']]$ holds.
    That $[[own(H,R'(x'),T2) + own(H,R'(y),T1) = own(H,R(y),T1+T2)]]$ follows immediately
    from \Cref{lem:ownadd} and the condition $[[R(y)=R'(x')=R'(y)]]$.
    We therefore conclude that $[[Own(H,R,G)=Own(H, R', G'')]]$.
  \end{rneqncase} % R-Let
 
  \begin{rneqncase}{R-LetInt}{ % FIXED
      [[ |- D <H, R, Es, E[let x = nn in e]>]]\\
      [[ <H, R, Es, E[let x = nn in e]> --> D <H, R { x' |-> nn }, Es, E[ [x'/x]e]> ]]
    }
    By inversion (see \rn{R-Deref}) we have that, for some $[[G]]$:
    \begin{align*}
      & [[ Th | G, x:{nu : int | nu = nn } | ll |- e : T => G']] \\
      & [[ Cons(H,R,G) ]] \andalso [[ ll |- G ]] \andalso [[ ll |- T => G' ]] \andalso [[ x not in dom G' ]]
    \end{align*}
    
    We give that $[[ G''= G,x':{nu:int | nu = nn}]]$, and it thus suffices to show
    that $[[ Th | G'' | ll |- [x'/x]e : T => G' ]]$, $[[ ll |- G'' ]]$,
    and $[[ Cons(H, R { x' |-> nn }, G'') ]]$.
    The first one is easy to obtain using the \Cref{lem:substitution} (see \rn{R-Deref}
    and the reasoning of \rn{R-Let} above, and the final two items are trivial.
  \end{rneqncase} % R-LetInt
  
  \begin{rneqncase}{R-IfTrue}{ % DONE
      [[ |- D <H, R, Es, E[ifz y then e1 else e2]>]]\\
      [[ <H, R, Es, E[ifz y then e1 else e2]> --> D <H, R, Es, E[e1]> ]]
    }
    By inversion (see \rn{R-Deref}) we have that for some $[[G]]$:
    \begin{align*}
      & [[ Th | G[x <- {nu:int | ph /\ nu = 0 }] | ll |- e1 : T => G' ]] \\
      & [[ Cons(H,R,G) /\ ll |- G /\  G(x) = {nu:int|ph} ]]
    \end{align*}
    We take $[[ G'' = G[x <- {nu:int | ph /\ nu = 0 }] ]]$, and want to show that $[[ Cons(H, R, G'') ]]$ (that $[[ Th | G'' | ll |- e1 : T => G' ]]$ and $[[ ll |- G'' ]]$ is immediate).
    
    By definition, from $[[Cons(H,R,G) ]]$ we have $[[ SAT(H,R,G) ]]$, in particular $[[ x in R ]]$, $[[ R(x) is INT ]]$ and $[[ [R][R(x)/nu]ph]]$,
    here $[[ G(x) = {nu:int | ph}]]$.
    The refinement predicates $[[ph]]$ still holds in the output environment, since nothing changes in the register after transition.
    Also from precondition of $\rn{R-IfTrue}$, we have $[[R(x)=0]]$, thus $[[x]]$ satisfies the refinement that $[[nu=0]]$.
    Thus $[[ [R][R(x)/nu](ph /\ nu = 0)]]$ is trivially satisfied.
  \end{rneqncase} %R-IfTrue
  
  \begin{rncase}{R-IfFalse} % FIXED
    Similar to the case for \rn{R-IfTrue}.
  \end{rncase}
  
  \begin{rneqncase}{R-MkRef}{ 
      [[ |- D <H, R, Es, E[let x = mkref y in e]>]]\\
      [[ <H, R, Es, E[let x = mkref y in e]> --> D <H', R', Es, E[ [x'/x]e]> ]]\\
      [[ a not in H ]] \andalso [[ x' not in R ]] \\
      [[H' = H { a |-> R(y) }]] \andalso [[ R' = R { x' |-> a }]]
    }
    By inversion (see \rn{R-Deref}) we have that for some $[[ G ]]$:
    \begin{align*}
      & [[ G(y) = T1 + T2 ]] \\
      & [[ Th | G[y <- T1],x : (T2 /\ x x = y) ref 1 | ll |- e : T => G' ]] \\
      & [[ Cons(H,R,G) ]] \andalso [[ ll |- G ]] \andalso [[ ll |- T => G' ]] \andalso [[ x not in dom G' ]]
    \end{align*}
    We give $[[ G'' = G[y <- T1],x' : (T2 /\ x' x' = y) ref 1 ]]$,
    and must show that $[[ Th | G'' | ll |- [x'/x]e : T => G' ]]$, $[[ ll |- G'' ]]$ and
    $[[ Cons(H', R', G'') ]]$. The first follows
    from \Cref{lem:substitution} and the reasoning found in \rn{R-Let},
    and the second from the assumed well-formedness of $[[T1 + T2 ]]$.
    
    It remains to show $[[Cons(H',R',G'')]]$.
    To show that the output environment is consistent, we must show that $[[SATv(H',R',R'(x'),(T2 /\ x' x'=y) ref 1)]]$ and $[[ SATv(H',R',R'(y),T1) ]]$.
    By reasoning similar to that in $\rn{R-Deref}$, it suffices to show that $[[ SATv(H',R',R'(x'),T2 ref 1) ]]$ and $[[ SATv(H',R',R'(y),T1) ]]$.
    We know that $[[Cons(H,R,G)]]$, from which we have $[[ SAT(H,R,G) ]]$, in particular $[[ y in R]]$ and $[[ SATv(H,R,R(y),G(y)) ]] $.
    As $[[ R < R' ]]$, from \Cref{lem:register}, we have $[[ SATv(H,R,R(y),T1+T2) ]]$ implies $[[ SATv(H,R',R'(y),T1+T2) ]]$.
    By \Cref{lem:newaddheap}, we then have $[[ SATv(H',R',R(y),T1+T2) ]]$.
    Then by \Cref{lem:satadd}, we have $[[ SATv(H',R',v,T1)]]$ and $[[SATv(H',R',v,T2) ]]$ where $[[v = R(y)]]$.
    We then have $[[ SATv(H',R',R'(x'),T2 ref 1) ]]$ and $[[ SATv(H',R',R'(y),T1) ]]$ are satisfied.
    
    We must also show that the ownership invariant is preserved.
    Then, it's to show $[[forall a' in H.Own(H',R',G'')(a') <= 1]]$. From $[[ Cons(H, R, G) ]]$ and \Cref{lem:ownaddheap,lem:ownadd} we have:
    \begin{align*}
      [[Own(H', R', G'')]] & = [[|< {z in dom G''} own(H',R'(z),G''(z))]] \\
             & = [[ |< {z in dom G} own(H,R(z),G(z)) + {a |->  1}]] \\
             & = [[Own(H, R, G) + {a |-> 1}]]
    \end{align*}

    Since $[[a not in H]]$ and $[[forall a' in H.Own(H,R,G)(a') <= 1]]$,
    we have $[[forall a' in H.Own(H',R',G'')(a') <= 1]]$.  \AI{Right?  Then, the following paragraph is not needed.}

    We want to show that $[[forall a in H'.Own(H', R', G'')(a) <= 1]]$.
    Suppose $[[a != a']]$ (that is $[[a in H]]$): we have $[[Own(H, R, G)(a)= Own(H', R', G'')(a)]]$ and thus $[[Own(H', R', G'')(a) <= 1]]$ by $[[Cons(H,R,G)]].$
    Next, suppose $a=a'$; we have $[[Own(H',R',G'')(a)=1]]$ only if $[[a' not in Own(H,R,G)]]$;
    this requirement immediately holds from $[[a' not in H]]$ by the definition of
    $[[own(H,v,T)]]$. \JT{We have been a little sloppy with our definition of + on
      these ownership functions so the domains of these functions is a little unclear.}
  \end{rneqncase} % R-MkRef

  \begin{rneqncase}{R-Assign}{ % FIXED
      [[ |- D <H, R, Es, E[y:=x;e]>]]\\
      [[ <H, R, Es, E[y:=x;e]> --> D <H', R', Es, E[e]> ]] \\
      [[a = R(y)]] \andalso [[ H' = H { a <- R(x)} ]] \andalso [[R' = R]]
    }
    By inversion (see the \rn{R-Deref} case) we have that
    \begin{align*}
      & [[ Th | G[x: T1 + T2][y : T' ref 1] | ll |- y := x; e : T => G']] \\
      & [[ Th | G[x <- T1][y <- (T2 /\ y y = T2 x) ref 1] | ll |- e : T => G']] \\
      & [[Cons(H,R,G) ]] \andalso [[ ll |- G ]]
    \end{align*}
    We give $[[ G'' = G[x <- T1][y <- (T2 /\ y y = T2 x) ref 1] ]]$. That
    $[[ Th | G'' | ll |- e : T => G' ]]$ and $[[ ll |- G'' ]]$ is immediate.
    
    We must therefore show that $[[ Cons(H',R',G'')]]$.
    To show that the output environment is consistent, we must show that $[[SATv(H',R,R(y),(T2 /\ y y = x) ref 1)]]$ and $[[ SATv(H',R,R(x),T1) ]]$.
    By reasoning similar to that in $\rn{R-Deref}$, it suffices to show that $[[ SATv(H',R,R(y),T2 ref 1) ]]$ and $[[ SATv(H',R,R(x),T1) ]]$.

    From $[[Cons(H,R,G)]]$, we know that $[[SAT(H,R,G)]]$, in particular, $[[ SATv(H,R,R(x),G(x)) ]]$.
    If we show that $[[own(H, R(x), T1 + T2)(a)=0]]$ and $[[ H ~ a H']]$,
    then, by \Cref{lem:heapfor0}, we will obtain $[[ SATv(H',R,R(x),T1+T2) ]]$,
    from which, by \Cref{lem:satadd},
    $[[ SATv(H',R,R(x),T1) ]]$ and $[[ SATv(H',R,R(x),T2) ]]$ follow.
    We then have $[[ SATv(H',R,R(y),T2 ref 1) ]]$ and $[[ SATv(H',R,R(x),T1) ]]$ as $[[H'(R(y)) = R(x) ]]$.

    To show $[[own(H, R(x), T1 + T2)(a)=0]]$, 
    we define $[[O0']], [[O0'']], [[O1']]$ and $[[O1'']]$ as below:
    \begin{align*}
      [[Own(H, R, G)]] & = [[O0' + O0'']] \\
      [[Own(H', R, G'')]] & = [[O1' + O1'' ]] \\
      [[O0']] & = [[ |< {z in dom G \ {y,x} } own(H,R(z),G(z)) ]] \\
      [[O0'']] &= [[ own(H, R(y), G(y)) + own(H, R(x), G(x)) ]] \\
      [[O1']] & = [[ |< {z in dom G'' \ {y,x}} own(H',R(z),G''(z)) ]] \\
      [[O1'']] &= [[ own(H', R(y), G''(y)) + own(H', R(x), G''(x)) ]]
    \end{align*}
    By the definition of the ownership function, $[[G(y) = T' ref 1 ]]$ and $[[ G(x) = T1 + T2]]$, we have:
    \begin{align*}
      [[O0'']] & = [[own(H, H(R(y)), T') + {a |-> 1} + own(H, R(x), T1 + T2)]] \\
      [[O1'']] & = [[own(H', H'(R(y)), T2) + {a |-> 1} + own(H',R(x), T1)]]
    \end{align*}
    As $[[ Own(H, R, G)(a) <= 1 ]]$ (from $[[Cons(H,R,G)]]$) and from
    \begin{align*}
      [[Own(H, R, G)(a) ]] & = [[ O0'(a) + O0''(a) ]] \\
                           & = [[O0'(a) + own(H, H(R(y)), T')(a) + 1 + own(H, R(x), T1 + T2)(a)]] \\
                           & = 1
    \end{align*}
    we have that:
    \begin{align*}
      [[own(H, H(R(y)), T')(a) & = own(H, R(x), G(x))(a) ]] \\
                               & = [[ own(H, R(x), T1 + T2)(a) ]] \\
                               & = [[O0'(a) = 0]]
    \end{align*}

    We now show that $[[ H ~ a H' ]]$. The first two conditions are clear, so it
    remains to show that, for any $[[nn]]$, $[[ H |- a ~> nn ]]$ iff $[[ H' |- a ~> nn ]]$.
    From \Cref{lem:sat-implies-shape-cons}, we have $[[ H |- a ~> |T' ref 1| ]]$, and
    a proof by contradiction gives that $[[ |T' ref 1| ]]$ is the only such $[[ nn ]]$
    for which $[[ H |- a ~> nn ]]$. We now argue the forward case for the bi-implication,
    the backwards case follows similar reasoning.

    Given $[[ H |- a ~> |T' ref 1|]]$, we  must show $[[ H { a <- R(x) } |- a ~> |T2 ref 1| ]]$, for which it suffices to show
    $[[ H { a <- R(x) } |- R(x) ~> |T2| ]]$. 
    From our requirement that $[[T']]$ and $[[T2]]$
    (and therefore $[[ T1 + T2 ]]$) have similar shapes, we have $[[ |T'| = |T2| = |T1 + T2| ]]$.
    By inverting the well-typing of the input configuration, we must have $[[ SATv(H, R, R(x), T1 + T2) ]]$,
    thus by \Cref{lem:sat-implies-shape-cons} we must have $[[ H |- R(x) ~> |T2| ]]$.
    As $[[|T2| = |T'|]] < [[|T' ref 1|]]$, $[[a]]$ cannot be reachable from $[[R(x)]]$ in $[[H]]$
    (otherwise we would have $[[a]]$ reaches an integer along multiple heap paths of differing lengths,
    a clear contradiction).
    Then the value of $[[a]]$ in $[[H]]$ is irrelevant to the derivation of $[[ H |- R(x) ~> |T2| ]]$,
    whereby $[[ H { a <- R(x) } |- R(x) ~> |T2| ]]$ must hold.

    Then, it's to show $[[forall a' in H'.Own(H', R, G'')(a') = (O1' + O1'')(a') = O1'(a') + O1''(a') <= 1]]$.
    For every $[[ z in dom G \ { y, x } ]]$ (and similarly for $[[G'']]$), we have
    $[[G(z) = G''(z)]]$. Further, from $[[O0'(a) = 0]]$ above, we must have $[[own(H, R(z), G(z))(a) = 0]]$
    for all such $[[z]]$. As $[[ H ~ a H' ]]$, by \Cref{lem:heapop}, we have that $[[ O0' = O1' ]]$.
    Then, from $[[ forall a' in H.Own(H, R, G'')(a') = O0'(a') + O0''(a') <= 1 ]]$, \AI{$[[G'']]$ should be $[[G]]$?  I didn't see where it came from.} it suffices to show
    that $[[ forall a' in H.O1''(a') <= O0''(a') ]]$.
       
    We first consider the case for $[[a]]$:
    \begin{align*}
      [[O1''(a)]] & = [[own(H', H'(R(y)), T2)(a) + own(H', R(x), T1)(a)+1]] \\
      [[O0''(a)]] & = [[own(H, R(x), T1 + T2)(a) + own(H, H(R(y)), T')(a)+1]]
    \end{align*}
    From above, we have $[[own(H, R(x), T2 + T1)(a) = own(H, H(R(y)), T')(a) = 0]]$.
    By \Cref{lem:heapop} and $[[ H ~ a H' ]]$, we have $[[own(H, R(x), T2 + T1) = own(H', R(x), T2 + T1)]]$.
    Also by \Cref{lem:ownadd}, we have $[[own(H', R(x), T2+T1) = own(H', R(x), T1)+own(H', R(x), T2)]]$.
    From $[[ H'(R(y)) = R(x) ]]$, we therefor have $[[own(H', H'(R(y)), T2)(a)=own(H', R(x), T1)(a)=0]]$,
    and thus:
    \[
      [[O1''(a)=own(H', H'(R(y)), T2)(a) + own(H', R(x), T1)(a)+1 = 1 = O0''(a)]]
    \]
    
    Next, consider some $[[a != a']]$;
    \begin{align*}
      [[O1''(a')]] & = [[own(H', H'(R(y)), T2)(a') + own(H', R(x), T1)(a') ]] \\
      [[O0''(a')]] & = [[own(H, R(x), T2 + T1)(a') + own(H, H(R(y)), T')(a') ]]
    \end{align*}
    By reasoning similar to the case for $a = a'$, we have $[[O1''(a') <= own(H, R(x), T2 + T1)(a') <= O0''(a')]]$.
    We therefore conclude that $[[forall a' in H'.Own(H', R, G'')(a') <= 1]]$.
  \end{rneqncase} % R-Assign
  
  \begin{rneqncase}{R-Alias}{
    [[ |- D <H, R, Es, E[alias(x = y); e]>]]\\
    [[ <H, R, Es, E[alias(x = y); e]> --> D <H, R, Es, E[e]> ]]\\
    [[ R(x) = R(y) ]]
    }
    By inversion (see \rn{R-Deref}) we have for some $[[G]]$ that:
    \begin{align*}
      & [[ Th | G[x : T1 ref r1][y: T2 ref r2] | ll |- alias(x = y); e : T => G']] \\
      & [[ Th | G[x <- T1' ref r1'][y <- T2' ref r2'] | ll |- e : T => G']] \\
      & [[ T1 ref r1 + T2 ref r2 ~ T1' ref r1' + T2' ref r2' ]] \\
      & [[ Cons(H,R,G) ]] \andalso [[ ll |- G ]]
    \end{align*}
    We give $[[ G'' = G[x <- T1' ref r1'][y <- T2' ref r2'] ]]$, and must show
    $[[ Th | G'' | ll |- e : T => G' ]]$, and $[[ ll |- G'']]$, $[[Cons(H, R, G'')]]$.
    The first is immediate, and the second follows from the definition of $[[~]]$ and the
    assumed well-formedness of $[[ T1 ]]$ and $[[ T2 ]]$.
    
    To show $[[Cons(H,R,G'')]]$ we first define:
    \begin{align*}
      [[Tp1]] = & [[T1 ref r1]] \\
      [[Tp2]] = & [[T2 ref r2]] \\
      [[Tq1]] = & [[T1' ref r1']] \\
      [[Tq2]] = & [[T2' ref r2']] \\
      [[Tq]] = & [[Tq1 + Tq2]] \\
      [[Tp]] = & [[Tp1 + Tp2 ]]
    \end{align*}
    We thus have $[[Tq ~ Tp]]$.
    
    We know that $[[Cons(H,R,G) ]]$, from which we have $[[ SAT(H,R,G) ]]$, in particular
    $[[ SATv(H,R,R(y),G(y) = T2 ref r2) ]]$ and $[[ SATv(H, R, R(x), G(x) + T1 ref r1) ]]$.
    From $[[Tp1 + Tp2 = Tp]]$ and \Cref{lem:satadd}, we have
    $[[SATv(H,R,v,Tp1)]]$ and $[[SATv(H,R,v,Tp2)]]$ imply $[[SATv(H,R,v,Tp)]]$, where $[[v = H(R(y))=H(R(x))]]$.
    From $[[Tq ~ Tp]]$ and \Cref{lem:sattosat}, we have that $[[SATv(H,R,v,Tp)]]$ implies $[[ SATv(H,R,v,Tq)]]$.
    From \Cref{lem:satadd} we also have that $[[SATv(H,R,v,Tq)]]$ implies $[[ SATv(H,R,v,Tq1) ]]$ and $[[ SATv(H,R,v,Tq2)]]$, where
    again $[[v = H(R(y))=H(R(x))]]$.

    Then from the reasoning above, the refinements of $[[Tq1]]$ and $[[Tq2]]$ are valid and $[[Cons(H, R, G'')]]$ holds.

    Then, it's to show $[[forall a in H.Own(H, R, G'')(a) <= 1]]$.
    To prove that $[[Own(H, R, G)=Own(H, R, G'')]]$ follows from:
    \begin{align*}
      &[[own(H,R(x),T1 ref r1) + own(H,R(y),T2 ref r2) ]] =  \\
      &\,\,\,\,[[ own(H,R(x),T1' ref r1') + own(H,R(y),T2' ref r2')]]
    \end{align*}
    which follows immediately from the conditions $[[ T1 ref r1 + T2 ref r2 ~ T1' ref r1' + T2' ref r2']]$, $[[R(x) = R(y)]]$, and \Cref{lem:ownadd,lem:ownequiv-preserv}.
  \end{rneqncase} % R-Alias

  \begin{rncase}{R-AliasPtr}
    By reasoning similar to the \rn{R-Alias} case.
  \end{rncase}
    
  
  \begin{rncase}{R-AliasFail,R-AliasPtrFail} % DONE
    The result configuration $[[AliasFail]]$ is trivially well-typed.
  \end{rncase}
  
  \begin{rneqncase}{R-Assert}{ % DONE
    [[ |- D <H, R, Es, E[assert(ph); e]>]]\andalso [[ G |= [R]ph ]]\\
    [[ <H, R, Es, E[assert(ph); e]> --> D <H, R, Es, E[e]> ]]\\
    }
    By inversion (see \rn{R-Deref}) we can obtain $[[ Th | G | ll |- assert(ph); e : T => G']]
$ and $[[ Th | G | ll |- e : T => G' ]]$, and
    the result follows immediately by taking $[[G'' = G ]]$.
  \end{rneqncase} % R-Assert
  
  \begin{rneqncase}{R-AssertFail}{ % DONE
      [[ |- D <H, R, Es, E[assert(ph); e]>]] \\
      [[ <H, R, Es, E[assert(ph); e]> --> D AssertFail ]]\\
      [[ Th | G | ll |- assert(ph); e : T => G']]
    }
    By inversion (see the \rn{R-Deref} case) we have that
    $[[ G |= ph ]]$, i.e., $[[ |= [G] ==> ph ]]$,
    for some $[[G]]$ such that $[[Cons(H,R,G)]]$ and
    $[[ ll |- G ]]$. From \Cref{lem:sat-implies-gamma} we therefore have $[[ |= [R][G] ]]$.
    From the precondition of \rn{R-AssertFail} we have that
    $[[  !|= [R]ph ]]$. But from $[[ |= [G] ==> ph ]]$ and $[[ |= [R][G] ]]$
    we can conclude that $[[ |= [R]ph ]]$, yielding a contradiction.
    We therefore conclude that this case is impossible.
  \end{rneqncase} % R-AssertFail
  
  \begin{rneqncase}{R-Call}{
      [[ |- D <H, R, Es, E[let x = f l (y1,,yn) in e']>]]\\
      [[f |-> (x1, .., xn) e in D]] \\
      [[ <H, R, Es, E[let x = f l (y1,,yn) in e']> \\
      --> D <H, R, E[let x = [] l in e'] : Es, [y1/x1] ,, [yn/xn] e> ]] \\
    }
    We must show that
    $[[ |- D <H, R, E[let x = [] l in e'] : Es, [y1/x1] ,, [yn/xn] e> ]]$
    for some $[[G'']]$.
    
    By inversion on the configuration typing, we have that, for some $[[G]]$:
    \[
      [[ Th | G | ll |- E[let x = f l (y1,,yn) in e'] : Tn => Gn ]] .
    \]
    By \Cref{lem:stack_var}, we then have for some $[[ T ]]$, and $[[ G' ]]$ that:
    \begin{align*}
      & [[ Th | G | ll |- let x = f l (y1,,yn) in e' : T => G' ]] \\
      & [[ Th | [] : T => G' | ll |-e E : Tn => Gn ]]
    \end{align*}
    Taking $[[ T1 = T ]], [[ G1 = G' ]], [[ G0 = G ]], [[ G2 = Gn ]], [[ T2 = Tn ]]$,
    by \Cref{lem:callfunc} we have, for some $[[T''']], [[G''']]$:
    \begin{align*}
      & [[ Th | G | l : ll |- vsub e : T''' => G''' ]] \\
      & [[ Th | []: T''' => G''' | ll |-e E[let x = [] l in e'] : Tn => Gn ]]
    \end{align*}
    where:
    \begin{align*}
      [[ vsub ]] & = [[ [y1/x1] ,, [yn/xn] ]] \\
      [[ Th(f) ]] & = [[ A <x1 : Ti ,, xn : Tn> -> <x1: T1' ,, xn : Tn' | Tp > ]]
    \end{align*}
    We therefore take $[[ G'' = G ]]$. The well-formedness of $[[G'']]$
    follows from $[[G'' = G]]$ and by inversion on the typing of the runtime configuration.
     
    We must also prove that $\forall i\in\set{1..n+1}.[[ Th | [] : Ti => Gi | lli-1 |-e E'i-1 : Ti-1 => Gi-1 ]]$  where $[[ E'n = E[let x = [] l in e'] ]]$ and $[[ E'i = Ei ]] (0 \leq i < n)$,
    which can be divided into proving
    $\forall i\in\set{1..n}.[[ Th | [] : Ti => Gi | lli-1 |-e E'i-1 : Ti-1 => Gi-1 ]]$ and $[[ Th | [] : Tn+1 => Gn+1 | lln |-e E'n : Tn => Gn ]]$. The first follows by inversion on $[[ |- D <H, R, Es, E[let x = f l (y1,,yn) in e']>]]$.

    We define $[[Gn+1 = G''' ]]$ and $[[Tn+1 = T''' ]]$, whereby the
    well-typing holds from the result of applying \Cref{lem:callfunc} above.
    
    Finally, $[[Cons(H,R,G'')]]$ follows immediately from $[[Cons(H,R,G)]]$ and $[[G''=G]]$.
  \end{rneqncase}
\end{proof}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: t
%%% End:
