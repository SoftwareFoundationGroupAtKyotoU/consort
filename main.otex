% This is samplepaper.tex, a sample chapter demonstrating the
% LLNCS macro package for Springer Computer Science proceedings;
% Version 2.20 of 2017/10/04
%
\documentclass[runningheads]{llncs}
%
\usepackage{bcprules}\typicallabel{T-Hoge}
\usepackage{bcpproof}
\usepackage{graphicx,color}
% Used for displaying a sample figure. If possible, figure files should
% be included in EPS format.
%
% If you use the hyperref package, please uncomment the following line
% to display URLs in blue roman font according to Springer's eBook style:
% \renewcommand\UrlFont{\color{blue}\rmfamily}

\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{stmaryrd}
\usepackage{parcolumns}
\usepackage{cases}
\usepackage[capitalize,nameinlink,noabbrev]{cleveref}
\usepackage{listings}% http://ctan.org/pkg/listings
\lstset{
  basicstyle=\ttfamily,
  mathescape
}

\input{local}
% \input{../effgrad/def/ott/coe}
\input{./lang}


\newcommand{\AI}[1]{\textcolor{blue}{[AI: #1]\marginpar{$\longleftarrow$}}}

\begin{document}
%
\title{Context- and Flow-Sensitive Refinement Types for Imperative Programs}
%
%\titlerunning{Abbreviated paper title}
% If the paper title is too long for the running head, you can set
% an abbreviated paper title here
%
\author{Ren Siqi \and Kohei Suenaga \and Atsushi Igarashi \and Naoki Kobayashi}
%
\authorrunning{Ren Siqi et al.}
% First names are abbreviated in the running head.
% If there are more than two authors, 'et al.' is used.
%
\institute{}
%
\maketitle              % typeset the header of the contribution
%
\begin{abstract}

\keywords{}
\end{abstract}
%
%
%

\section{Simple setting without indirection of pointers and without subtyping}

\newcommand\val{v}

\subsection{Language}

\[
  \begin{array}{rcl}
  [[d]] &::=& [[f |-> (x1,...,xn)e ]] \\
  [[e]] &::= &
              [[ x ]] \mid
              [[ let x = y in e]] \mid
              \LET x = \val \IN \expr \mid
              \IFZERO x \THEN \expr_1 \ELSE \expr_2  \\ &\mid&
              \LET x = \MKREF y \IN \expr \mid
              \LET x = *y \IN \expr \mid
              \LET x = f^\ell(x_1,\dots,x_n) \IN \expr \\ &\mid&
              x \WRITE y \SEQ \expr \mid
              \ALIAS(x = y) \SEQ \expr \mid
              \ASSERT(\varphi) \SEQ \expr \mid \expr_1 \SEQ \expr_2 \\
    [[v]] &::=& [[nn]] \\
    [[P]] &::=& [[<{d1,...,dn}, e>]] \\
    [[l]] &\in& \textbf{Labels}\\
  \end{array}
\]

\(\varphi\) stands for a logical formula over integers and paths $\pps$).
We assume a set of \emph{variables}, which is ranged over by $x,y,z,\dots$, and a set of \emph{locations}, which is ranged over by $a,b,c,\dots$.

\subsection{Type system}
\begin{definition}
  Context strings $[[B]]$ are defined as follows:
  \[
    \begin{array}{rcl}
      [[ B ]] & ::= & [[ . ]] \mid [[ l ]] : [[ B ]] \mid [[A]]
    \end{array}
  \]
  $[[A]]$ is a context string variable. Let $[[CV(B)]]$ be $\set{[[A]]}$ for
  context strings whose final element is $[[A]]$ and $\emptyset$ otherwise.
\end{definition}

\begin{definition}
  $\sem{[[T]]}_y$ is defined as follows:
  \[
    \begin{array}{rcl}
      \sem{[[{x:int | ph}]]}_y &=& [[ [y/x]ph ]]\\
      \sem{[[{x:int | ph} ref r]]} &=& [[ Top ]]
    \end{array}
  \]
\end{definition}

\begin{definition}
  The refinement predicates $[[ph]]$ are defined as follows:
  \[
    \begin{array}{rcl}
      [[ph]] & ::= & [[ph1 ==> ph2]] \mid
                     [[ ph1 /\ ph2 ]] \mid
                     [[ pfun(x1,..,xn) ]] \mid
                     [[ lvar = V' ]] \mid [[ lvar != V' ]] \\
             & \mid & [[ B1 = B2? ]] \\
      [[ V ]] & ::= & [[ x ]] \mid [[ v ]]
    \end{array}
  \]
  $[[pfun]]$ is a predicate symbol with an interpretation in the
  theory used by the underlying solver. The predicate $[[ B1 = B2? ]]$ is a prefix
  query which checks whether $[[B2]]$ is a prefix of $[[B1]]$. We write $[[FPV(ph)]]$ for
  the free variables occuring in $[[ph]]$, and write $[[FPCV(ph)]]$ for the free context
  variables that appear in $[[ph]]$.
  Formally, $\mathbf{FPV}$ is defined as
  \begin{align*}
    [[FPV(ph1 /\ ph2)]] & = [[FPV(ph1)]] \cup [[FPV(ph2)]] \\
    [[FPV(ph1 ==> ph2)]] & = [[FPV(ph1)]] \cup [[FPV(ph2)]] \\
    [[FPV(pfun(x1,..,xn))]] & = \set{[[x1]],\ldots,[[xn]]} \\
    [[FPV(B1 = B2?)]] & = \emptyset \\\
    [[FPV(lvar = V')]] & = \begin{cases}
      \emptyset & [[lvar]] \equiv  [[v]] \\
      \set{x} & [[lvar]] \equiv [[x]]
    \end{cases} \cup \begin{cases}
      \emptyset & [[V']] \equiv  [[v]] \\
      \set{x} & [[V']] \equiv [[x]]
    \end{cases} \\\
    [[FPV(lvar != V')]] & = [[FPV(lvar = V')]]
  \end{align*}
  Through abuse of notation we will also write $[[FPV(T)]]$ to indicate the free variables
  in the refinement of $[[T]]$, i.e.:
  \begin{align*}
    [[FPV(T' ref r)]] & = [[FPV(T')]] \\
    [[FPV({x:int|ph})]] & = [[FPV(ph)]] \setminus \set{[[x]]}
  \end{align*}
  and $[[FPCV(T)]]$ to indicate free variables that appear in the refinement of $[[T]]$.
\end{definition}

\begin{figure}[t]
  \leavevmode
  \infrule[WF-Env]{
    [[ forall x in G. G | B |- G(x) ]]
  }{
    [[B |- G]]
  }
  \infrule[WF-Int]{
    [[ST(G), x:int | B |- ph]]
  }{
    [[G | B |- { x:int|ph} ]]
  }
  \infrule[WF-Ref]{
    [[G | B |- T]]
  }{
    [[G | B |- T ref r ]]
  }
  \infrule[WF-Phi]{
    [[FPV(ph)]] \subseteq \set{x \mid [[x in Gst /\ Gst(x) = int]]} \andalso
    [[FPCV(ph)]] \subseteq [[CV(B)]]
  }{
    [[Gst | B |- ph]]
  }
  \infrule[WF-Result]{
    [[G | B |- T]] \andalso
    [[B |- G]]
  }{
    [[ B |- T => G ]]
  }
  \infrule[WF-FunType]{
    [[ A |- x1:T1,,xn:Tn ]] \\ [[ A |- T => x1:T1',,xn:Tn' ]]
  }{
    [[ |- A <x1:T1,,xn:Tn> -> <x1:T1',,xn:Tn'|T> ]]
  }
  \infrule[WF-FunEnv]{
    [[ forall f in Th.|- Th(f)]]
  }{
    [[ |- Th ]]
  }
  \caption{Well-formedness of types and environments}
  \label{fig:type-wf}
\end{figure}

\begin{definition}[Well-formedness of types]
  We define simple types $[[ST]]$ and environments $[[Gst]]$ by:
  \[
    \begin{array}{rcl}
      [[ST]] & ::= & [[int]] \mid [[ int ref ]]  \\
      [[Gst]] & ::= & [[empty]] \mid [[Gst,x:ST]]
    \end{array}
  \]
  Let $[[ST(G)]]$ be the obvious transformation of $[[G]]$ into $[[Gst]]$.
  The well-typedness of types and type environments are shown in \cref{fig:type-wf}.
\end{definition}

\begin{definition}
  $\sem{[[G]]}$ is defined as follows:
  \[
    \begin{array}{rcl}
      \sem{[[empty]]} &=& [[ Top ]]\\
      [[G,x: T]] &=& \sem{[[G]]} \land \sem{[[T]]}_x \\
    \end{array}
  \]
\end{definition}

\begin{definition}
  We write $\Gamma \models \varphi$ if $\models \sem{\Gamma} \implies \varphi$ is valid.
\end{definition}

\paragraph{Operations on types.}

\begin{figure}[t]
  \leavevmode
  \infax[Tadd-Int]{
    [[{x:int|ph} + {x:int|ph} = {x:int|ph}]]
  }
  \infrule[Tadd-Ref1]{
    [[r1]] \ne 0 \andalso
    [[r2]] \ne 0
  }{
    [[{x:int|ph1} ref r1 + {x:int|ph2} ref r2 = {x:int|ph1 /\ ph2} ref r1 + r2]]
  }
  \infrule[Tadd-Ref2]{
    [[r1]] \ne 0 \andalso
    [[r2]] \ne 0
  }{
    [[ { x:int | ph } ref r1 + {x:int | ph} ref r2 = { x:int | ph} ref r1 + r2]]
  }
  \infrule[Tadd-Ref3]{
    [[r]] > 0
  }{
    [[ T1 ref 0 + T2 ref r = T2 ref r]]
  }
  \infax[Tadd-Ref4]{
    [[T1 ref 0 + T2 ref 0 = { x: int | Top } ref 0]]
  }
  \caption{Rules for $\typ_1 \addt \typ_2$.}
  \label{fig:addition}
\end{figure}

\begin{definition}
  $[[ T1 + T2 ]]$ is the least commutative partial operation that satisfies the rules in Figure~\ref{fig:addition}.
  \AI{Rules for unit and int types.}
\end{definition}

\begin{definition}
  The typed equality proposition $[[ x = T y ]]$ is defined as
  \[
    [[ x = T y ]] \equiv \begin{cases}
      [[ x = y ]] & [[ T = {z:int|ph} ]] \\
      [[ Top ]] & o.w.
      \end{cases}
  \]
\end{definition}
\begin{definition}
  $[[T /\ y ph]]$ is the strengthening operation defined as:
  \[
    [[ T /\ y ph' ]] = \begin{cases}
      [[ { z: int | [z/x]ph /\ [z/y]ph' }]] & [[ T = { x: int | ph } /\ z not in FPV(ph') /\ z not in FPV(ph) ]] \\
      [[ { z: int | [z/x]ph /\ [z/y]ph' } ref r]] & [[ T = { x: int | ph } ref r /\ z not in FPV(ph') /\ z not in FPV(ph) ]] \\
      [[ T ]] & o.w.
    \end{cases}
  \]
\end{definition}

\begin{definition}{Context Substitution}
  Define context substitution operation $[[ [B/A] ]]$ over predicates $[[ph]]$, types $[[T]]$, and type environments $[[G]]$, as:

  \begin{align*}
    [[ [B/A](ph1 /\ ph2) ]] & = [[ [B/A]ph1 /\ [B/A]ph2 ]] \\
    [[ [B/A](ph1 ==> ph2) ]] & = [[ [B/A]ph1 ==> [B/A]ph2 ]] \\
    [[ [B/A]pfun(x1,..,xn) ]] & = [[ pfun(x1,..,xn) ]] \\
    [[ [B/A](lvar = V') ]] & = [[ lvar = V' ]] \\
    [[ [B/A](lvar != V') ]] & = [[ lvar != V' ]] \\
    [[ [B/A](B' = B''?) ]] & = [[ [B/A]B' = [B/A]B''? ]] \\
    [[ [B/A](T ref r) ]] & = [[([B/A] T) ref r]] \\
    [[ [B/A]{x:int|ph} ]] & = [[{x:int|[B/A]ph}]] \\
    [[ [B/A](G,x: T) ]] & = [[ ([B/A]G), x : [B/A]T ]] \\
    [[ [B/A]empty ]] & = [[ empty ]] \\
  \end{align*}
\end{definition}

\paragraph{Subtyping.}

\begin{figure}[t]
\leavevmode
\infrule[Sub-Int]{
  [[G |= ph1 ==> ph2]]
  }{
   [[G |- {x:int|ph1} <: {y:int|ph2}]]
  }
  \infrule[Sub-Ref]{
    [[r1 >= r2]]
    \andalso
    [[r2 > 0 ==> G |- T1 <: T2 ]]
  }{
    [[ G |- T1 ref r1 <: T2 ref r2 ]]
  }
  \infrule[Sub-TyEnv]{
    [[ forall x in G'.G|- G(x) <: G'(x) ]]
  }{
    [[ G <: G' ]]
  }
  \caption{Rules for subtyping.}
  \label{fig:subtyping}
\end{figure}

\paragraph{Type judgment.}

\AI{\rn{T-Let} loses information that $x$ is equal to $y$ (unlike \rn{T-LetInt}).}

\begin{figure}[t]
  \leavevmode
  \infrule[T-Var]{
  }{
    [[ Th | G [ x : T1 + T2] | B |- x : T1 => G[ x <- T2 ] ]]
  }
  \infrule[T-Let]{
    [[ Th | G [ y <- T1 /\ y y = T1 x  ], x : (T2 /\ x x = T2 y) | B |- e : T => G']] \andalso
    [[B |- T => G' \ x]]
  }{
    [[ Th | G[y: T1 + T2] | B |- let x = y in e : T => G' \ x]]
  }
  \infrule[T-LetInt]{
    [[ Th | G, x:{x : int | x = nn } | B |- e : T => G']] \andalso
    [[B |- T => G' \ x]]
  }{
    [[ Th | G | B |- e : T => G' \ x]]
  }
  \infrule[T-If]{
    [[ Th | G[x <- {y:int | ph /\ y = 0 }] | B |- e1 : T => G' ]] \\
    [[ Th | G[x <- {y:int | ph /\ y != 0}] | B |- e2 : T => G' ]]
  }{
    [[ Th | G[x : {y:int|ph}] | B |- ifz y then e1 else e2 : T => G' ]]
  }
  \infrule[T-MkRef]{
    [[ Th | G[y <- T1],x : (T2 /\ x x = T2 y) ref 1 | B |- e : T => G']] \andalso
    [[ B |- T => G' \ x ]]
  }{
    [[ Th | G[y : T1 + T2] | B |- let x = mkref y in e : T => G' \ x ]]
  }
  \infrule[T-Deref]{
    [[r > 0]] \andalso
    [[ Th | G[y <- (T1 /\ y y = T1 x) ref r], x : T2 | B |- e : T => G']] \andalso
    [[ B |- T => G' \ x ]]
  }{
    [[ Th | G[y: (T1 + T2) ref r] | B |- let x = *y in e : T => G' \ x ]]
  }
  \infrule[T-Call]{
    [[ Th(f) = A < x1 : T1 ,, xn : Tn > -> <x1: T1' ,, xn : Tn' | T > ]] \\
    [[csub = [l:B/A] ]] \andalso [[ vsub = [y1/x1] ,, [yn/xn] ]] \\
    [[ Th | G[yi <- csub vsub Ti'], x : csub vsub T | B |- e : T' => G' ]] \\
    [[ B |- T' => G' \ x]]
  }{
    [[ Th | G[yi: csub vsub Ti] | B |- let x = f l (y1,,yn) in e : T' => G' \ x]]
  }
  \infrule[T-Assign]{
    (\text{The shapes of $[[T']]$ and $[[T2]]$ are similar}) \\
    [[ Th | G[x <- T1][y <- T2 ref r /\ y y = T1 x] | B |- e : T => G']] \\
  }{
    [[ Th | G[x: T1 + T2][y : T' ref 1] | B |- y := x; e : T => G']]
  }
  \infrule[T-Alias]{
    [[(T1 ref r1 + T2 ref r2) = (T1' ref r1' + T2' ref r2')]] \\
    [[ Th | G[x <- T1' ref r1'][y <- T2' ref r2'] | B |- e : T => G']]
  }{
    [[ Th | G[x : T1 ref r1][y: T2 ref r2] | B |- alias(x = y); e : T => G' ]]
  }
  \infrule[T-Seq]{
    [[ Th | G | B |- e1 : T' => G' ]] \andalso
    [[ Th | G' | B |- e2 : T'' => G'' ]]
  }{
    [[ Th | G | B |- e1 ; e2 : T'' => G'' ]]
  }
  \infrule[T-Assert]{
    [[ G |= ph ]] \andalso
    [[ Th | G | B |- e : T => G' ]]
  }{
    [[ Th | G | B |- assert(ph); e : T => G']]
  }
  \infrule[T-Sub]{
    [[ G <: G' ]] \andalso
    [[ Th | G' | B |- e : T => G'' ]] \andalso
    [[ x not in G ]] \andalso
    [[ G'', x:T <: G''',x:T' ]]
  }{
    [[ Th | G | B |- e : T' => G''' ]]
  }
  \caption{Expression typing rules.}
  \label{fig:typingRules}
\end{figure}
\begin{figure}
  \infrule[T-FunDef]{
    [[ Th (f) = A <x1 : T1 ,, xn : Tn > -> < x1: T1' ,, xn : Tn' | T> ]] \\
    [[ Th | x1:T1 ,, xn:Tn | A |- e : T => x1: T1' ,, xn : Tn' ]]
  }{
    [[ Th |- f |-> (x1,..,xn) e ]]
  }
  \infrule[T-Funs]{
    \forall [[f |-> (x1, .., xn) e in D]].[[ Th |- f |-> (x1,..,xn) e ]]
  }{
    [[ Th |-  D ]]
  }
  \infrule[T-Prog]{
    [[ Th |- D ]] \andalso
    [[ Th | empty | . |- e : T => G ]]
  }{
    [[ |- < D, e > ]]
  }
\caption{Program typing rules}
\label{fig:progTyping}
\end{figure}

\AI{\rn{T-Let} discards all the refinement on \(x\).  Probably we should propagate it to $\tenv'$.}

\AI{\rn{T-Let} and \rn{T-LetInt} can be merged.}

\AI{\rn{T-Call} requires actual arguments to be variables introduced at the end of the type environment.  This is not a restriction because one can introduce let-expressions before a function call and alias-expressions after the call.}

\AI{$\varepsilon$ in \rn{T-Prog} stands for the empty string.}

In \cref{fig:typingRules} $[[ G[x: T] ]]$ denotes an environment
$[[G]]$ such that $[[G(x) = T]]$. $[[ G[x <- T] ]]$ denotes the functional update of the type
of $[[x]]$ to $[[T]]$ in $[[G]]$.

%edit by shiki
\subsection{Transition rules}
For each language expression occurs, we accomplish writing the rules for transition. In order to deal with function, we introduce the stack in the system. Here, $\langle H, R,\overrightarrow{E}, E \rangle$ represent heap(memory),
register(environment), a sequence of return contexts, program respectively.
It's obvious when $e$ is an integer $n$, when it's a variable $x$, in order to better handle with recursive types,
we refresh every variable $x$ to $x'$ after executing expression.
Define a named local expression $\LET x=y \IN e$, which $x$ can then be used later on in the function instead of $y$, so that the
register of $x$ update to the $R(y)$.
The expression $x:=y$ only update the register of $x$ to $y$.
The same changes happen when $\LET x=n \IN e$, the only difference is that now we use an integer instead of a variable.
It becomes a little bit complex when dealing with reference, in transition rule for $\LET x=*y \IN e$, we update the register of $x$ to $H(R(y))$,
which means the memory address of the variable $y$.
If you want to $\MKREF$, first it should satisfies that the variable $y$ doesn't used in memory before, after executing, heap
turns to $H(y\ra v)$, here $v$ represents a new memory cell.
We divide the expression $\IFZERO x\THEN e_1 \ELSE e_2$ into two parts, $e_1$ will be given if $x\ra 0$ in the initial register,
otherwise we will get $e_2$.
When handling with $\ALIAS$ and $\ASSERT$, we introduce $\bf{AliasFail}$ and $\bf{AssertFail}$ to the rules. They will be thrown if the memory cell or
the environment can't hold for some states.
The expression about function definition, we replace it by the function body itself and we also need to remember to bind $x$ to
the result of $[\tilde{y}/\tilde{x}]e'$ and then calculate $e$, which is written by $\LET x=[] \IN e$.

\begin{figure}
\[
  \begin{array}{rcl}
    [[ E ]] & ::= & [[ E'; e ]] \mid [[ [] ]] \\
    [[ CE ]] & ::= & [[ E[let y = [] l in e] ]]
  \end{array}
\]
\label{fig:eval-context-grammar}
\caption{Grammar of evaluation and return contexts}
\end{figure}

\subsection{Examples}
For examples, consider the following programs, written in an ML-like language.
The righthand side shows the types assigned to each variable before execution of
each line.
\begin{parcolumns}{2}
\colchunk[1]{%
\begin{verbatim}
[1]
  let x = mkref 1 in
  let y = *x in
    assert(y>0)
\end{verbatim}
}
\colchunk[2]{%
\newline
\newline
  $\emptyset$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^1$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^1, y \COL \set{r \COL \TINT \mid r = 1}$ \newline
}
\colplacechunks
\end{parcolumns}

\begin{parcolumns}{2}
\colchunk[1]{%
\begin{verbatim}
[2]
  let x = mkref 1 in
  let y = *x in
    assert(y<0)
\end{verbatim}
}
\colchunk[2]{%
\newline
\newline
  $\emptyset$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^1$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^1, y \COL \set{r \COL \TINT \mid r = 1}$ \newline
}
\colplacechunks
\end{parcolumns}

In example[1] and example[2], from typing rule for T-MkRef, the ownership for varible $x$ will be 1.
As for dereference, $y$ will hold the same value as $x$.The only difference in the programs is the
assert statements, from the types of varible $y$, it's clear that the example[1] will return true,
and the example[2] will be false, since $y \COL \set{r \COL \TINT \mid r = 1} \models y > 0$.

\begin{parcolumns}{2}
\colchunk[1]{%
\begin{verbatim}
[3]
  let x = mkref 1 in
  let y = x in
  let z = *y in
    assert(z>0)
\end{verbatim}
}
\colchunk[2]{%
\newline
\newline
  $\emptyset$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^1$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^0, y \COL \set{r \COL \TINT \mid r = 1} \TREF^1$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^0, y \COL \set{r \COL \TINT \mid r = 1} \TREF^1, z \COL \set{r \COL \TINT \mid r = 1}$ \newline
}
\colplacechunks
\end{parcolumns}

In example[3], from T-Let $x$ will transfer the ownership of the reference cell to $y$, so that the
owership of $y$ will be 1 and then can be dereferenced to $z$ with the return value, the result of
the assertion is true, since $z \COL \set{r \COL \TINT \mid r = 1} \models z>0$

\begin{parcolumns}{2}
\colchunk[1]{%
\begin{verbatim}
[4]
  let x = mkref 1 in
  let y = x in
    y := -1;
    let z = *y in
      assert(z>0)
\end{verbatim}
}
\colchunk[2]{%
\newline
\newline
  $\emptyset$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^1$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^0, y \COL \set{r \COL \TINT \mid r = 1} \TREF^1$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^0, y \COL \set{r \COL \TINT \mid r = -1} \TREF^1$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^0,y \COL \set{r \COL \TINT \mid r = -1} \TREF^1, z \COL \set{r \COL \TINT \mid r = -1}$ \newline
}
\colplacechunks
\end{parcolumns}

In example[4], it contains update the value of $y$ to $-1$. From T-Assign it only changes the value of $y$.
And the result should be false obviously, because $z \COL \set{r \COL \TINT \mid r = -1} \not\models z>0$.
The refinement type $\set{r \COL \TINT \mid r = 1}$ of $x$ after the command $y := -1$ does not reflect the actual value of $*x$.
This is OK in our type system because the ownership of the reference $x$ is $0$; the refinment attached to this reference type is not reliable.

\begin{parcolumns}{2}
\colchunk[1]{%
\begin{lstlisting}
[5]
  let x = mkref 1 in
  let y = x in
  let $z_1$ = *y in
  let $z_2$ = *x in
    assert($z_1$>0 && $z_2$>0)
\end{lstlisting}
}
\colchunk[2]{%
\newline
\newline
  $\emptyset$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^1$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^{0.5}, y \COL \set{r \COL \TINT \mid r = 1} \TREF^{0.5}$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^{0.5},y \COL \set{r \COL \TINT \mid r = 1} \TREF^{0.5}, z_1 \COL \set{r \COL \TINT \mid r = 1}$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^{0.5},y \COL \set{r \COL \TINT \mid r = 1} \TREF^{0.5},z_1 \COL \set{r \COL \TINT \mid r = 1},z_2 \COL \set{r \COL \TINT \mid r = 1}$ \newline
}
\colplacechunks
\end{parcolumns}

In example[5], dereferencing doesn't change the ownership of each variable, and the result
of assertion is true, because $z_1 \COL \set{r \COL \TINT \mid r = 1},z_2 \COL \set{r \COL \TINT \mid r = 1}\models z_1, z_2>0$.

\begin{parcolumns}{2}
\colchunk[1]{%
\begin{lstlisting}
[6]
  let x = mkref 1 in
  let y = x in
  let $z_1$ = *y in
  let $z_2$ = *x in
    x := 0;
    let $z_3$ = *x in
      assert($z_3$=0)

\end{lstlisting}
}
\colchunk[2]{%
\newline
\newline
  $\emptyset$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^{1}$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^{r_1}, y \COL \set{r \COL \TINT \mid r = 1} \TREF^{1-r_1} \mbox{where $1 > r_1 > 0$}$ \newline
  $z_1 \COL \set{r \COL \TINT \mid r = 1}$ \newline
  $z_2 \COL \set{r \COL \TINT \mid r = 1}, r_1 = 1 \mbox{ which contradicts to $1 > r_1 > 0$}$ \newline
  safe but cannot be typed
}
\colplacechunks
\end{parcolumns}

In example[6], after dereferencing $x$ to $z_2$ the ownership of $x$ will become 0, which means that
it can't be updated in our type system. But we can add statement \textbf{alias}(x=y)
to shuffle the ownerships between $x$ and $y$, then the program will be typable as belows. And the assert
statement will give true result, since $z_3 \COL \set{r \COL \TINT \mid r = 0}\models z_3 = 0$.

\begin{parcolumns}{2}
\colchunk[1]{%
\begin{lstlisting}
[6 typable]
  let x = mkref 1 in
  let y = x in
  let $z_1$ = *y in
  let $z_2$ = *x in
    alias(x=y)
    x := 0;
    let $z_3$ = *x in
      assert($z_3$=0)
\end{lstlisting}
}
\colchunk[2]{%
\newline
\newline
  $\emptyset$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^1$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^{0.5}, y \COL \set{r \COL \TINT \mid r = 1} \TREF^{0.5}$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^{0.5},y \COL \set{r \COL \TINT \mid r = 1} \TREF^{0.5}, \dots$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^{0.5}, y \COL \set{r \COL \TINT \mid r = 1} \TREF^{0.5}, \dots$ \newline
  $x \COL \set{r \COL \TINT \mid r = 1} \TREF^{1}, y \COL \set{r \COL \TINT \mid r = 1} \TREF^{0},\dots$ \newline
  $x \COL \set{r \COL \TINT \mid r = 0} \TREF^1, y \COL \set{r \COL \TINT \mid r = 1}\TREF^{0},\dots$ \newline
  $x \COL \set{r \COL \TINT \mid r = 0} \TREF^1, y \COL \set{r \COL \TINT \mid r = 1}\TREF^{0},z_3 \COL \set{r \COL \TINT \mid r = 0}$ \newline
}
\colplacechunks
\end{parcolumns}

In order to derive example for Context-Sensitiveness, we first focus on examples for function. Here are examples for “push/pull” instructions.
We can see that function $\bf{push}$ is just assign an integer $x$ to variable $p$. $\bf{pull}$ is to pop the integer stored in $p$. Here we write
$\sigma \COL\COL= \forall \beta.<\dots>\ra <\dots\mid\tau>$ to contain the return values.

\begin{parcolumns}{2}
\colchunk[1]{%
\begin{verbatim}
[7 push]
  def push(p, x) =
    p := x;
\end{verbatim}
}
\colchunk[2]{%
\newline
\newline
  $\bf{push} \COL \newline
  \forall \beta. p\COL \set{n \COL \TINT \mid T}\TREF^1, x\COL \set{n \COL \TINT \mid \frac{(\beta[0]=l_1\Rightarrow n=0)\land}{(\beta[0]\neq l_1\Rightarrow n>0))}} \ra \newline
  p\COL \set{n \COL \TINT \mid n=x_{pre}}\TREF^1, x\COL \set{n \COL \TINT \mid x_{pre}=x}$ \newline
}
\colplacechunks
\end{parcolumns}

\begin{parcolumns}{2}
\colchunk[1]{%
\begin{verbatim}
[8 pull]
  def pull(p) =
    *p;
\end{verbatim}
}
\colchunk[2]{%
\newline
\newline
  $\bf{pull} \COL \newline
  \forall \beta. p\COL \set{n \COL \TINT \mid \frac{(\beta[0]=l_6\Rightarrow n>0)\land}{(\beta[0]\neq l_6\Rightarrow n\geq 0))}}\TREF^1\ra \newline
  p\COL \set{n \COL \TINT \mid p_{pre}=p}\TREF^1\mid \set{n \COL \TINT \mid \frac{(\beta[0]=l_6\Rightarrow n>0)\land}{(\beta[0]\neq l_6\Rightarrow n\geq 0))}}$ \newline
}
\colplacechunks
\end{parcolumns}


After writing the types changing for each function, now we can take an example for explaining context-sensitiveness of our type-system.
In the example[9], using the types changes in the above, we can write the types before executing for each statement.
For every function $\bf{push/pull}$, we also give labels $l_1,\dots,l_6$ to distinguish the context-flow.
It's obvious that the result of assertion should be true, since $x \COL \set{n \COL \TINT \mid n > 0}\models x > 0$.

\begin{parcolumns}{2}
\colchunk[1]{%
\begin{lstlisting}
[9 Context-Sensitiveness]
let p = mkref _ in
let x = mkref _ in
  push$^{l_1}$(p, 0)
  if b then
    x := pull$^{l_2}$(p)
    push$^{l_3}$(p, *x+1)
  else
    x := pull$^{l_4}$(p)
    push$^{l_5}$(p, *x+2)
  x := pull$^{l_6}$(p)
  assert(*x > 0)
\end{lstlisting}
}
\colchunk[2]{%
\newline
\newline
\newline
\newline
  $p\COL \set{n \COL \TINT \mid T}\TREF^1, x\COL \set{n \COL \TINT \mid T}\TREF^1$ \newline
  $p\COL \set{n \COL \TINT \mid n=0}\TREF^1, x\COL \set{n \COL \TINT \mid T}\TREF^1$ \newline\newline
  $p\COL \set{n \COL \TINT \mid n=0}\TREF^1, x\COL \set{n \COL \TINT \mid n\geq 0}\TREF^1$ \newline
  $p\COL \set{n \COL \TINT \mid n>0}\TREF^1, x\COL \set{n \COL \TINT \mid n\geq 0}\TREF^1$ \newline
  $p\COL \set{n \COL \TINT \mid n=0}\TREF^1, x\COL \set{n \COL \TINT \mid T}\TREF^1$ \newline
  $p\COL \set{n \COL \TINT \mid n=0}\TREF^1, x\COL \set{n \COL \TINT \mid n\geq 0}\TREF^1$ \newline
  $p\COL \set{n \COL \TINT \mid n>0}\TREF^1, x\COL \set{n \COL \TINT \mid n\geq 0}\TREF^1$ \newline
  $p\COL \set{n \COL \TINT \mid n>0}\TREF^1, x\COL \set{n \COL \TINT \mid n>0}\TREF^1$ \newline

}
\colplacechunks
\end{parcolumns}

\paragraph{2-CFA Call Sensitivity}

Consider the following program:
\begin{lstlisting}
f(x, b):
  if b then
    f$^{\ell_3}$(x + 1, false)
  else
    g$^{\ell_4}$(x)
g(x): x + 1

let $r_1$ = f$^{\ell_1}$(0, true) in
let $r_2$ = g$^{\ell_2}$(0) in
assert ($r_1 + r_2 \geq 3$);
\end{lstlisting}

This program is clearly correct, as \lstinline{f} will recurse exactly once before execution
flows through to the else branch and the call to \lstinline{g}.

The type system can verify this example if we give f and g the following types:
\begin{align*}
  f: \forall \alpha.\langle&x: \{ n : int \mid (\alpha = \ell_3? \produces n \geq 1) \wedge n \geq 0 \} \\
                           &b: \{ n: bool \mid (\alpha = \ell_3? \produces n = 0) \wedge (\alpha \neq \ell_3? \produces n = 1) \}\rangle \\
                           & \ra \{ n : int \mid n > 1 \} \\
  g: \forall \beta.\langle&x: \{ n : int \mid (\beta = \ell_4\ell_3? \produces n \geq 1) \wedge n \geq 0 \}\rangle \\
                           & \ra \{ n: int \mid n = n_{pre} + 1\}
\end{align*}
(Here we abbreviate $\tuple{x_1:\typ_1,\ldots,x_n:\typ_n} \ra \tuple{x_1:\typ_1,\ldots,x_n:\typ_n\mid \typ}$ as $\tuple{x_1:\typ_1,\ldots,x_n:\typ_n} \ra \typ$ when the types of the arguments
do not change.)

The key step in the typing derivation is at the call to g within the body of $f$. We reach the
call in the type environment:

\begin{align*}
  x: & \{ n : int \mid (\alpha = \ell_3? \produces n \geq 1) \wedge n \geq 0 \} \\
  b: & \{ n: bool \mid (\alpha = \ell_3? \produces n = 0) \wedge (\alpha \neq \ell_3? \produces n = 1) \wedge n = 0 \}
\end{align*}
Notice that we have propagated the path condition induced by the if
statement to the type of $b$.

We then apply the rule T-Call. Performing substitution on the path variable in the type
of g indicates that the argument $x$ must have type:

\[
  [\ell_4\alpha/\beta]\{ n : int \mid (\beta = \ell_4\ell_3? \produces n \geq 1) \wedge n \geq 0 \} = \{ n : int \mid (\ell_4\alpha = \ell_4\ell_3?)\} \produces n \geq 1) \wedge n \geq 0 \}
\]

$x$ indeed has this type. Simplifying the result type of $g$ we have that the overall expression has type:

\[
  \{ n : int \mid (\alpha = \ell_3? \produces n \geq 2) \wedge n \geq 1 \}
\]

It remains to verify that this type satisfies the result type of $f$, i.e.,
$\{ n : int \mid n > 1 \}$. Applying the rule T-Sub, it suffices to
show that:

\begin{align*}
  \models \big( & (\alpha = \ell_3? \produces b = 0) \wedge (\alpha \neq \ell_3? \produces b = 1) \wedge b = 0\big) \produces \\
  & \big((\alpha  = \ell_3? \produces n \geq 2) \wedge n \geq 1\big) \produces n > 1
\end{align*}

In the above, we have omitted the constraint generated from the type of $x$ in the environment
as it is irrelevant. The automated theorem prover Z3 discharges the above implication,
indicating the above subtyping relationship is valid.

It is instructive to also consider the typing of the recursive call in
the true branch of $f$'s body. Per the rule T-Call, substituting
$\ell_3\alpha$ for $\alpha$ in the argument types of $f$ indicates that
\lstinline{x + 1} must have type:
\[
  \{ n : int \mid (\ell_3\alpha = \ell_3? \produces n \geq 1) \wedge n \geq 0 \}
\]
and \lstinline{false} (i.e., \lstinline{0}) must have type:
\[
  \{ n : bool | (\ell_3\alpha = \ell_3? \produces n = 0) \wedge (\ell_3\alpha \neq \ell_3? \produces n = 1) \}
\]
The latter type simplifies to $\{ n : bool \mid n = 0 \}$ which the constant \lstinline{0} has
(tehnically an application of the subtyping rule is required, but it is straightforward).
We must also verify that:
\[
  \tenv \p \{ n : int \mid (\alpha = \ell_3? \produces n \geq 2) \wedge n \geq 1 \} \subt \{ n : int \mid (\ell_3\alpha = \ell_3? \produces n \geq 1) \wedge n \geq 0 \}
\]
It is easy to verify this relationship holds.

\paragraph{\large{\bf{example to explain context stack in the type system}}}
$\newline$

Suppose $\langle H, R,\overrightarrow{E}, l_4 \rangle$ represent heap(memory), register(environment), a sequence of context, program respectively.
Here, $\overrightarrow{E} = E_3:E_2:E_1$, which $E_3$ is the newest context and $E_1$ is the oldest one.
The context flow will go as belows, and $l_3$ is the newest program to call and $l_1$ is obvious the oldest one.
It needs to satisfy the condition $\cup_i \textit{dom}(\tenv_i)= \textit{dom}(R)$.

$\newline\tenv_4, l_3 l_2 l_1 \vdash l_4:\tau_4 \Rightarrow \tenv_4'\newline$
$\tenv_3, []:\tenv_4 \Rightarrow \tenv_4'\mid \tau_4, l_2 l_1 \vdash E_3:\tau_3 \Rightarrow \tenv_3'\newline$
$\tenv_2, []:\tenv_3 \Rightarrow \tenv_3'\mid\tau_3, l_1 \vdash E_2:\tau_2 \Rightarrow \tenv_2'\newline$
$\tenv_1, []:\tenv_2 \Rightarrow \tenv_2'\mid\tau_2, \varepsilon \vdash E_1:\tau_1 \Rightarrow \tenv_1'\newline$

To have a better understanding, we can now assume a function $\funenv(f) = \langle x\COL\set{z\mid T}\TREF^1\rangle \ra \langle x\COL\set{z\mid z>0}\TREF^1\rangle$.
We give a varible $a$ to this function, it will have $a\COL\set{z\mid T}\TREF^1 \Rightarrow a\COL\set{z\mid z>0}\TREF^1 \LET y=f(a) \IN\dots$.
That is $\overrightarrow{E}\COL \LET y=[ ] \IN\dots, D(f)[a/x]$.




\section{Proof of Type Soundness(Theorem 1)}
To prove the safety of typing, we need to show that the total owership for each heap is always 1.
A triple $(\Gamma, H, R)$ is consistent, written as $Cons(H,R,\tenv)$, and defined as $\bf{Fig.5}$.
$\newline\bf{Theorem.}$
$\forall D, e, \bf{C}$ $\newline \vdash \langle D, e\rangle$ and $\langle \varnothing, \varnothing, \cdot, e \rangle \ra^* \bf{C}$, which imply
$\bf{C} \neq \bf{AssertFail}.\newline$
The followings are key lemmas:
\begin{lemma}
  \label{lem:initial}
  $[[ |- D <empty,empty,.,e> ]]$
\end{lemma}

\begin{lemma}
  \label{lem:preservation}
  $[[ |- D <H,R,Es,e> /\ <H,R,Es,e> --> D C ==> |- D C ]]$
\end{lemma}

\begin{lemma}
  \label{lem:assertfail}
  $[[ |- D C ==> C != AssertFail ]]$
\end{lemma}


\paragraph{Proof of Lemma 2.}
\begin{proof}

The proof organized by cases on the last rule used in the typing derivation of $e$.
To prove this, we need another lemmas for substitution and context:

\begin{itemize}
    \item[$-$] Case \rn{T-Var}: In this case, we have:

    $[[ |- D <H, R, CE : Es, x>]], [[<H, R, CE : Es, x> --> D <H, R, Es, CE[x]> ]] $\newline
    $[[ Th | G [ x : T1 + T2] | B |- x : T1 => G[ x <- T2 ] ]]$ \newline
    $[[ G' = G [ x : T1 + T2] ]] \andalso [[En[e] = x]] \andalso [[En]] = [][[ /\]] e = x$\newline
    $[[ Th | [] : T => G' | ll |-e En : Tn => Gn ]]$

    From above, we can obtain that $[[ Th | [] : T => G' | ll |-e [] : T => G' ]]$.

    $\forall i\in\set{1..n}.[[ Th | [] : Ti => Gi | lli-1 |-e Ei-1 : Ti-1 => Gi-1 ]] \\$
    Suppose there is $[[<H, R, CE : CE': Es, x> --> D <H, R, CE': Es, CE[x]> ]]$ \newline
    We will obtain $[[ Th | [] : Tn => Gn | lln-1 |-e CE' : Tn-1 => Gn-1 ]]$

    Also using \textbf{lemma 6}, we will show that $[[ |- D <H, R, Es, CE[x]>]]$, since  $[[Th | G' | B |- CE[x] : Tn => Gn]]$.

    \item[$-$] Case \rn{T-Deref}:
    In this case, we have:

    $\vdash [[ <H, R, Es, E[let x = *y in e]> --> D <H, R { x' |-> v }, Es, E[ [x'/x]e]> ]]$ \newline
    $[[r > 0]] \andalso [[ Th | G[y <- (T1 /\ y y = x) ref r], x : T2 | B |- e : T => G']]$ \newline
    $[[ B |- T => G' \ x ]]\andalso [[ Th | G[y: (T1 + T2) ref r] | B |- let x = *y in e : T => G' \ x ]]$ \newline
    $\tenv(y)=\{n\COL\TINT\mid\phi\}\TREF^r$ \newline
    $[[G'' = G[y <- (T1 /\ y y = x') ref r], x' : T2]]$

    We want to show that $[[ Th | G'' | B |- [x'/x]e : T => G']]$ and $[[Cons(H,R { x' |-> v }, G')]]$ hold.
    The first one is easy to obtain using the $\bf{Lemma (substitution).}$

    It remains to show $[[Cons(H,R { x' |-> v }, G'')]]$, we know that $[[Cons(H,R,G)]] = [[SAT(H,R,G)]]\land\forall h\in \textit{dom}(H).F(h)\leq 1$.

    From $[[Cons(H,R,G)]]\produces [[SAT(H,R,G)]]\produces R(y)\in \textit{dom}(H)\land H(R(y))\in \mathbb{Z}\land \phi(H(R(y))\land R(x')=H(R(y))$, which gives that $\phi(R(x'))$ holds.

    Then, it's to show $\forall h\in \textit{dom}(H).F(h)\leq 1$. First,it's obvious that $\textit{dom}(\tenv'')=\textit{dom}(\tenv)\cup\{x'\}=\textit{dom}(R)\cup\{x\}=\textit{dom}(R')$.
    Secondly, we focus on prove that $F_0=F_1$, which defines as below:

    $F_0=F'_0 + \mathbf{own}(H, R(y), \tenv(y))\newline$
    $F_1=F'_1 + \mathbf{own}(H', R'(y), \tenv'(y)) + \mathbf{own}(H', R'(x'), \tenv'(x'))\newline$
    $F'_0 = \sum_{z\in\textit{dom}(\tenv)\setminus\{R(y)\}}\mathbf{own}(H,R(z),\tenv(z))\newline$
    $F'_1 = \sum_{z\in\textit{dom}(\tenv')\setminus\{R(y),R(x')\}}\mathbf{own}(H',R'(z),\tenv'(z))$

    Since $F'_0=F'_1$ holds and $\mathbf{own}(H, R(y), \tenv(y))=\mathbf{own}(H', R'(y), \tenv'(y)) + \mathbf{own}(H', R'(x'), \tenv'(x'))$,
    we know that $x$ is an integer, so $\mathbf{own}(H', R'(x'), \tenv'(x'))$ should be $\emptyset$, and $\mathbf{own}(H, R(y), \tenv(y))=\mathbf{own}(H', R'(y), \tenv'(y))$.
    we can finally prove $F_0=F_1$.

    \item[$-$] Case where last rule is \rn{T-Let}: Similar to the case for \rn{T-Deref}.

    \item[$-$] Case \rn{T-LetInt}: In this case, we have:

    $\vdash [[ <H, R, Es, E[let x = *y in e]> --> D <H, R { x' |-> nn }, Es, E[ [x'/x]e]> ]]$ \newline
    $[[ Th | G, x:{x : int | x = nn } | B |- e : T => G']] \andalso [[ Cons(H, R, G) ]]\newline$
    $[[ G''= G ]]\{x' \mapsto \{x' = n\}\}$

    We want to show that $[[ Th | G'' | B |- [x'/x]e : T => G']]$ and $[[ Cons(H, R { x' |-> nn }, G'') ]]$ hold.
    The first one is easy to obtain using the $\bf{Lemma (substitution).}$
    Also, the $[[ Cons(H, R { x' |-> nn }, G'') ]]$ is clear.

    %From $[[Cons(H,R,G)]]\produces [[SAT(H,R,G)]]\produces R(y)\in \textit{dom}(H)\land H(R(y))\in \mathbb{Z}\land \phi(H(R(y))\land R(x')=H(R(y))$, which gives that $\phi(R(x'))$ holds.

    %Then, it's to show $\forall h\in \textit{dom}(H).F(h)\leq 1$.
    %The first condition can be given as $\textit{dom}(\tenv')=\textit{dom}(\tenv)\cup\{x'\}=\textit{dom}(R)\cup\{x\}=\textit{dom}(R')$.
    %The second condition follows from:

    %$\sum_{z\in\textit{dom}(\tenv')}\mathbf{own}(H',R'(z),\tenv'(z)) = \sum_{z\in\textit{dom}(\tenv)}\mathbf{own}(H,R(z),\tenv(z)) + \sum_{z\in\textit{dom}(\tenv)}\mathbf{own}(H,n,\tau)$.

    \item[$-$] Case \rn{T-If}: In this case, we only show the case for $[[ R(x) = 0 ]]$; the case for $R(x) \neq 0$ is similar. If $R(x) = 0$, we have:

    $\vdash [[ <H, R, Es, E[ifz x then e1 else e2]> --> D <H, R, Es, E[e1]> ]] $\newline
    $[[ Th | G[x : {y:int|ph}] | B |- ifz y then e1 else e2 : T => G' ]]$ \newline
    $[[ Th | G[x <- {y:int | ph /\ y = 0 }] | B |- e1 : T => G' ]]$

    We know $[[ G'' = G[x <- {y:int | ph /\ y = 0 }] ]]$,want to show that $[[ Cons(H, R, G'') ]]$ hold.
    $[[Cons(H,R,G'')]] = [[SAT(H,R,G'')]] \wedge [[a in H]].[[F(a)]] \leq 1.$\newline
    From $[[Cons(H,R,G)]] \produces [[ SAT(H,R,G) ]] \produces x\in \textit{dom}(R)\land R(x)\in \mathbb{Z}\land \varphi(R(x))\land R(x)=0$, which gives that $\varphi(R(x))\cup\{0\}$ holds.

    %The first condition follows immediately. The second condition follows from:

    %$\mathbf{own}(H,0,\tenv'(x)) = \mathbf{own}(H,0,\tenv(x))$.

    \item[$-$] Case \rn{T-MkRef}: In this case, we have:

    $\vdash [[ <H, R, Es, E[let x = mkref y in e]> --> D <H { a |-> R(y) }, R { x' |-> a }, Es, E[ [x'/x]e]> ]]\newline$
    $[[ Th | G[y <- T1],x : (T2 /\ x x = y) ref 1 | B |- e : T => G']] \andalso
     [[ B |- T => G' \ x ]] \newline$
    $[[ Th | G[y : T1 + T2] | B |- let x = mkref y in e : T => G' \ x ]]\newline$
    $[[ G'' = G[y <- T1],x : (T2 /\ x x = y) ref 1 ]]\andalso \tenv(x)=\{n\COL\TINT\mid\phi\}\TREF^1$

    We want to show that $[[ Th | G[y <- T1],x' : (T2 /\ x x' = y) ref 1 | B |- [x'/x]e : T => G']]$ and $[[Cons(H { a |-> R(y) }, R { x' |-> a },G'')]]$ hold.
    The first one is easy to obtain using the $\bf{Lemma (substitution).}$\newline
    $[[Cons(H { a |-> R(y) }, R { x' |-> a },G[y <- T1])]] = [[SAT(H { a |-> R(y) }, R { x' |-> a },G[y <- T1])]] \wedge [[a in H]].[[F(a)]] \leq 1.$\newline
    From $[[Cons(H, R ,G)]] \produces [[ SAT(H, R , G) ]] \produces x\in \textit{dom}(R)\land H(R(x))\in \mathbb{Z}\land x=y \produces \phi(H(R(y)) \land x' = H(R(y))$, which gives that $\phi(x')$ holds.

    Then, it's to show $\forall h\in \textit{dom}(H).F(h)\leq 1$.
    The first condition can be given as $\textit{dom}(\tenv'')=\textit{dom}(\tenv)\cup\{x'\}=\textit{dom}(R)\cup\{x\}=\textit{dom}(R')$.
    The second condition follows from:

    $\sum_{z\in\textit{dom}(\tenv'')}\mathbf{own}(H',R'(z),\tenv''(z)) = \sum_{z\in\textit{dom}(\tenv)}\mathbf{own}(H,R(z),\tenv(z)) + \mathbf{own}(H',y,\tau_1\TREF^1) = \sum_{z\in\textit{dom}(\tenv)}\mathbf{own}(H,R(z),\tenv(z)) + \{a\mapsto R(y)\}$.

    \item[$-$] Case \rn{T-Assign}: In this case, we have:

    $\vdash [[ <H, R, Es, E[x:=y;e]> --> D <H { a <- R(y)}, R, Es, E[e]> ]]\andalso a = R(x)$\newline
    $[[ Th | G[y <- T1][x <- T2 ref r] | B |- e : T => G']]$ \newline
    $[[ Th | G[y: T1 + T2][x : T' ref 1] | B |- x := y; e : T => G']]$ \newline
    $[[ G'' = G[y <- T1][x <- T2 ref r] ]] \andalso \tenv(x)=\{n\COL\TINT\mid\phi\}\TREF^r$

    We want to show that $[[Cons(H { a |-> R(y) }, R ,G'')]]$ hold.
    $[[Cons(H { a |-> R(y) }, R { x' |-> a },G'')]] = [[SAT(H { a |-> R(y) }, R,G'')]] \wedge [[a in H]].[[F(a)]] \leq 1.$\newline
    From $[[Cons(H , R,G)]] \produces [[ SAT(H, R,G) ]] \produces x\in \textit{dom}(R)\land H(R(x))\in \mathbb{Z}\land R(x)=R(y) \produces \phi(H(R(y)) \land a = H(R(y))$, which gives that $\phi(a)$ holds.

    Then, it's to show $\forall h\in \textit{dom}(H).F(h)\leq 1$.
    The first condition can be given as $\textit{dom}(\tenv'')=\textit{dom}(\tenv)=\textit{dom}(R)=\textit{dom}(R')$.
    Secondly, we focus on prove that $F_0=F_1$, which defines as below:

    $F_0=F'_0 + \mathbf{own}(H, R(y), \tenv(y))\newline$
    $F_1=F'_1 + \mathbf{own}(H', R'(y), \tenv'(y)) + \mathbf{own}(H', R'(x'), \tenv'(x'))\newline$
    $F'_0 = \sum_{z\in\textit{dom}(\tenv)\setminus\{R(y),R(x)\}}\mathbf{own}(H,R(z),\tenv(z))\newline$
    $F'_1 = \sum_{z\in\textit{dom}(\tenv')\setminus\{R(y),R(x)\}}\mathbf{own}(H',R'(z),\tenv'(z))$

    Since $F'_0=F'_1$ holds and $\mathbf{own}(H, R(y), \tenv(y))+ \mathbf{own}(H, R(x), \tenv(x))= \{R(x)\mapsto 1\}+\mathbf{own}(H, R(y), \tau) = \{R(x)\mapsto 1\}+\mathbf{own}(H, R(y), \tau_1) + \mathbf{own}(H, R(y), \tau_2) = \mathbf{own}(H', R'(y), \tenv'(y))+ \mathbf{own}(H', R'(x), \tenv'(x))$.
    we can finally prove $F_0=F_1$.

    \item[$-$] Case \rn{T-Alias}: In this case, we have:

    $\vdash [[ <H, R, Es, E[alias(x = y); e]> --> D <H, R, Es, E[e]> ]]$ \newline
    $[[(T1 ref r1 + T2 ref r2) = (T1' ref r1' + T2' ref r2')]]$ \newline
    $[[ Th | G[x <- T1' ref r1'][y <- T2' ref r2'] | B |- e : T => G']]$ \newline
    $[[ Th | G[x : T1 ref r1][y: T2 ref r2] | B |- alias(x = y); e : T => G']]$ \newline
    $[[ G'' = G[x <- T1' ref r1'][y <- T2' ref r2'] ]]$

    It remains to show $[[Cons(H, R, G'')]]$.
    $[[Cons(H, R, G'')]] = [[SAT(H, R, G'')]] \wedge [[a in H]].[[F(a)]] \leq 1.$\newline
    From $[[Cons(H , R,G)]] \produces [[ SAT(H, R,G) ]] \produces x\in \textit{dom}(R)\land H(R(x))\in \mathbb{Z}\land \tau_1\TREF^{r_1} + \tau_2\TREF^{r_2} \land  \tau_1\TREF^{r_1} + \tau_2\TREF^{r_2} = \tau'_1\TREF^{r'_1} + \tau'_2\TREF^{r'_2}$, which gives that $[[SAT(H, R, G'')]]$ holds.

    Then, it's to show $\forall h\in \textit{dom}(H).F(h)\leq 1$.
    The first condition follows immediately. The second condition follows from:

    $\mathbf{own}(H,R(x),\tau_1\TREF^{r_1}) + \mathbf{own}(H,R(y),\tau_2\TREF^{r_2}) = \mathbf{own}(H,R(x),\tau'_1\TREF^{r'_1}) + \mathbf{own}(H,R(y),\tau'_2\TREF^{r'_2})$.

    which follows immediately from the conditions $\tau_1\TREF^{r_1} + \tau_2\TREF^{r_2} = \tau'_1\TREF^{r'_1} + \tau'_2\TREF^{r'_2}$ and $R(x) = y$.

    \item[$-$] Case \rn{T-Call}: In this case, we need the following three lemmas to help:
    $\bf{Lemma (1).}$
    $\tenv_1\vdash E[e] \COL \tau \produces \tenv_2 \iff \tenv_1\vdash e \COL \tau_0 \produces \tenv'_1\land \tenv_1,[]\COL\tau_0\produces \tenv'_1\vdash E\COL\tau \produces \tenv_2.\newline$
    $\bf{Lemma (2).}$
    $\funenv\mid\tenv\mid\beta\vdash e\COL\tau\produces \tenv' \land \beta\notin\fv(\funenv)\implies \funenv\mid[\overrightarrow{l}/\beta]\tenv\mid\overrightarrow{l}\vdash e\COL[\overrightarrow{l}/\beta]\tau\produces [\overrightarrow{l}/\beta]\tenv'.\newline$
    $\bf{Lemma (3).}$
    $\funenv\mid\tenv,[]\COL[l\COL\overrightarrow{l}/\beta]\tau_f\produces \tenv_e \mid \overrightarrow{l}\vdash E[\LET x=[]^l \IN e]\COL\tau_{n+1}\produces\tenv_{n+1}$.

    We want to show that $\vdash\langle H,R,\overrightarrow{E},E[\LET x=f^l(\tilde{y})\IN e]\rangle\ra \langle H,R,E[\LET x=[]^l\IN e]\COL E,e_f[\tilde{y}/\tilde{x}]\rangle$.

    $\funenv(f)=\forall\beta\langle\tilde{x}\COL\tilde{\tau}\rangle\ra\langle\tilde{x}\COL\tilde{\tau'}\mid\tau\rangle\andalso \forall x\in \tilde{y}\andalso \tenv(y_i)=\tilde{\tau_i} [l_i\overrightarrow{l}/\beta]\newline$
    Then, we can obtain $\funenv\mid\tenv\{x\mapsto [l\COL\overrightarrow{l}/\beta]\tau,y_i\mapsto [l\COL\overrightarrow{l}/\beta]\overrightarrow{\tau'_i}\}\mid\overrightarrow{l}\vdash e\COL [l\COL\overrightarrow{l}/\beta]\tau\produces \tenv_e\newline$
    After that, $\funenv\mid \tilde{x}\COL\tilde{\tau}\mid\beta\vdash e_f\COL\tau\produces\tilde{x}\COL\tilde{\tau'}$ implies that $\funenv\mid \tilde{y}\COL [l\COL\overrightarrow{l}/\beta]\tilde{\tau}\mid[l\COL\overrightarrow{l}/\beta]\beta\vdash [\overrightarrow{y}/\overrightarrow{x}]e_f\COL[l\COL\overrightarrow{l}/\beta]\tau\produces\tilde{y}\COL[l\COL\overrightarrow{l}/\beta]\tilde{\tau'}$ using $\bf{Lemma (2).}$
\end{itemize}
\end{proof}


\begin{lemma}
  \label{lem:substitution}
   [[ Th | G, x : T' | B |- e : T |- v : T' => Th | G | B |- e[v/x] : T ]]
\end{lemma}
$\funenv \mid \tenv, x \COL \tau' \mid \beta \vdash e \COL \tau \land \vdash v \COL \tau' \produces \funenv \mid \tenv \mid \beta \vdash e\{v/x\} \COL \tau$. \newline
$\bf{Lemma (context).}$
$\vdash E[e] \COL \tau \land \vdash e \COL \tau' \land \vdash e' \COL \tau' \produces \vdash E[e'] \COL \tau$.



\begin{lemma}\label{lem:ctxt-sub-distribute}
  $[[ T3 = T1 + T2  ==> [B/A]T3 = [B/A]T1 + [B/A]T2 ]]$
\end{lemma}
\begin{proof}
  By straightforward cases analysis on the definition of $[[ T1 + T2 ]]$.
\end{proof}

\begin{lemma}\label{lem:ctxt-sub-wf}
  For any $[[ B ]]$:
  \begin{enumerate}
  \item $[[ A |- G ==> B |- [B / A]G]]$
  \item $[[ G | A |- T ==> [B/A]G | B |- [B/A]T]]$
  \item $[[ A |- T => G ==> B |- [B/A] T => [B/A]G ]]$
  \end{enumerate}
\end{lemma}
\begin{proof}
  Observe that for any substitution $[[ [B/A] ]]$, $[[ST([B/A]G) = ST(G)]]$, whence it suffices
  to show that $[[ FPCV ( [B/A]ph ) ]] \subseteq [[CV(B)]]$ for any refinement $[[ph]]$
  appearing in of $[[T]]$ or a type in $[[G]]$.

  By the assumed well-formedness of $[[T]]$ with respect to context
  variable $[[A]]$ (resp. $[[G]]$), after substitution all free
  context variables in $[[T]]$ (resp. the types in $[[G]]$) will be
  replaced with $[[B]]$. Thus, post-substitution any free context
  variables in the refinement of $[[ [B/A] T]]$ (resp. refinements of
  types in $[[ [B/A] G]]$) will be the context variables that appear
  in $[[B]]$, trivially satisfying our requirement.
\end{proof}

\begin{lemma}
  \label{lem:ctxt-sub-subtype}
  For any $[[G]]$, $[[T1]]$, $[[T2]]$, $[[A]]$ and $[[B]]$, $[[ G |- T1 <: T2 ==> [B/A]G |- [B/A]T1 <: [B/A]T2 ]]$.
\end{lemma}
\begin{proof}
  If $[[A]]$ does not appear free in $[[T1]]$, $[[T2]]$ or $[[G]]$, then the result trivially holds. Let us then assume
  $[[A]]$ appear free. We prove the result by induction on the subtyping derivation.

  \begin{rneqncase}{Sub-Ref}{
      [[ T1 = T1' ref r1 ]] & [[ T2 = T2' ref r2 ]] \\
      [[ [B/A] T1 = ([B/A]T1') ref r2 ]] & [[ [B/A]T2 = ([B/A]T2') ref r2 ]] \\
      [[  r2 > 0 ==> G |- T1' <: T2' ]]
    }
    If $[[ r2 = 0 ]]$ then the result trivially holds. If not, we must show that $[[ [B/A]G |- [B/A]T1' <: [B/A]T2' ]]$
    which holds immediately from the induction hypothesis.
  \end{rneqncase}

  \begin{rneqncase}{Sub-Int}{
      [[ T1 = {x:int|ph1} ]] & [[ T2 = {y:int|ph2} ]] \\
      [[ [B/A]T1 = {x:int|[B/A]ph1 } ]] & [[ [B/A]T2 = {y:int|[B/A]ph2 } ]] \\
      [[ G |= ph1 ==> ph2 ]]
    }
    We must show that $[[ [B/A]G |= [B/A]ph1 ==> [B/A]ph2 ]]$, i.e. $[[ |= [ [B/A]G ] /\ [B/A]ph1 ==> [B/A]ph2 ]]$.
    From our assumption that $[[ G |= ph1 ==> ph2 ]]$ we have that $[[ |= [ G ] /\ ph1 ==> ph2 ]]$ is valid,
    whence the formula $[[ [ G ] /\ ph1 ==> ph2 ]]$ is true for any possible valuation of the free context
    variable $[[A]]$. Thus the formula $[[ [ [B/A]G ] /\ [B/A]ph1 ==> [B/A]ph2 ]]$ must also be valid.
  \end{rneqncase}
\end{proof}

\begin{lemma}
  \label{lem:ctxt-subst-well-typed}
  \begin{align*}
    & [[ Th | G | A |- e : T => G' ]] \Longrightarrow\\
    & [[ Th | [ ll / A ] G | ll |- e : [ ll / A ] T => [ ll / A ] G' ]]
  \end{align*}
\end{lemma}
\begin{proof}
  By induction on the typing derivation $[[ Th | G | A |- e : T => G' ]]$. In the following
  analysis, we will freely use the identity $[[([B/A]G) \ x = [B/A](G \ x)]]$.
  \begin{rneqncase}{T-Var}{
      [[e = x]] & [[T = T2]] \\
      [[G = G0[x : T1 + T2] ]] & [[ G' = G0[x <- T2] ]]
    }
    By application of \cref{lem:ctxt-sub-distribute}.
  \end{rneqncase}
  \begin{rneqncase}{T-LetInt}{
      [[e = let x = nn in e']] & [[ Th | G, x:{x:int|x = nn} | A |- e' : T => G'' ]] \\
      [[ G' = G'' \ x ]] & 
    }
    The induction hypothesis gives
    \[
      [[ Th | [ll/A]G, x:{x:int|x=nn} | ll |- e : [ll/A]T => [ll/A]G'' ]]
    \]
    \cref{lem:ctxt-sub-wf} gives $[[ ll |- [ll/A]T => [ll/A](G'' \ x) ]]$, from which we
    conclude $[[ Th | [ll/A]G | ll |- let x = nn in e : [ll/A]T => [ll/A](G'' \ x) ]]$
    as required.
  \end{rneqncase}

  \begin{rneqncase}{T-Let}{
      & [[e = let x = y in e']] & [[ G' = G'' \ x ]] \\
      & [[ Th | G1 | A |- e' : T => G'' ]] & [[ G1 = G[y <- (T1 /\ y y = T1 x)], x:(T2 /\ x x = T2 y)]] \\
      & [[ G = G0[y: T1 + T2]  ]]
    }
    By \cref{lem:ctxt-sub-distribute},
    $[[ ([ll/A]G)(y) = [ll/A](T1 + T2) = ([ll/A]T1 + [ll/A]T2) ]]$. We must then
    show that $[[ Th | G1' | ll |- e : [ll/A]T => [ll/A]G'' ]]$
    where
    \[
      [[ G1' = ([ll/A]G)[y <- [ll/A]T1 /\ y y = x ],x:([ll/A]T2 /\ x x = y) ]]
    \]
    As $[[G1' = [ll/A]G1]]$ the induction hypothesis gives the required typing judgment.
    That $[[ll |- [ll/A]T => [ll/A]G'' ]]$ follows from \cref{lem:ctxt-sub-wf} as in the \rn{T-LetInt}
    case. 
  \end{rneqncase}

  \begin{rncase}{T-If,T-Seq}
    By trivial application of the inductive hypothesis.
  \end{rncase}

  \begin{rncase}{T-MkRef,T-Deref}
    By reasoning similar to \rn{T-Let}.
  \end{rncase}

  \begin{rneqncase}{T-Call}{
      [[ vsub = [y1/x1] ,, [yn/xn] ]] \\
      [[ csub = [l:A/A'] ]] \\
      [[ Th | G1 | A |- e : T => G2 ]] \\ [[ G' = G2 \ y ]] \\
      [[ A |- T => G2 \ y  ]] \\
      [[ Th(f) = A' < x1 : T1 ,, xn : Tn > -> <x1: T1' ,, xn : Tn' | T' > ]]  \\
      [[ G1 = G[yi <- csub vsub Ti'], x : csub vsub T' ]]
    }
    We must first show that for $[[ csub' = [l:ll/A'] ]]$:
    \[
      [[  Th | G3 | ll |- e : [ll/A]T => [ll/A]G2 ]]
    \]
    where $[[ G3 = ([ll/A]G)[yi <- csub' vsub Ti'], x: csub' vsub T']]$.
    
    We first observe that $[[ G3 = [ll/A]G1 ]]$ (this follows from the
    equivalence of $[[ [ll/A][l:A/A'] ]]$ and
    $[[ [l:ll / A'] ]]$) whence the induction hypothesis
    gives the required typing derivation.

    We must also show that
    $\forall i \in \set{1..n}.[[([l:ll/A]G)(yi) = csub' vsub Ti]]$.
    From the assumed well-typing of the term under $[[A]]$ we have
    that $\forall i \in\set{1..n}.[[csub G(yi) = csub vsub Ti]]$. Recall
    that $[[csub']]$ is equivalent to $[[ [ll/A] csub ]]$, whence we have
    $[[ [ll/A] csub G(yi) = [ll/A] csub vsub Ti]]$ for any $[[i]]$ as
    equality is preserved by consistent substitution.

    That $[[ ll |- [ll/A]T => [ll/A](G2 \ y) ]]$ holds from application of
    \cref{lem:ctxt-sub-wf}.
  \end{rneqncase}

  \begin{rncase}{T-Assign,T-Alias}
    By the inductive hypothesis and application of \cref{lem:ctxt-sub-distribute}.
  \end{rncase}

  \begin{rneqncase}{T-Sub}{
      [[ Th | G1 | A |- e : T1 => G2 ]] & [[ G <: G1 ]] \\
      [[ G2, x : T1 <: G',x : T ]] & [[ Th | G | A |- e : T => G' ]]
    }
    By the induction hypothesis we have that: $[[ Th | [ll/A]G1 | ll |- e : [ll/A]T1 => [ll/A]G2 ]]$.
    If we show that $[[ [ll/A]G <: [ll/A]G1 ]]$ and $[[ [ll/A]G2, x : [ll/A]T1 <: [ll/A]G', x : [ll/A]T ]]$
    ($[[ x not in G ]]$) 
    we will have the required result. To show the first requirement, for any $[[ x in G ]]$ we have that
    $[[ [ll/A]G |- [ll/A]G(x) <: [ll/A]G1(x) ]]$ from \cref{lem:ctxt-sub-subtype} whence we have $[[ [ll/A]G <: [ll/A]G1 ]]$.
    To show the latter requirement, we observe that $[[ [ll/A]G2, x : [ll/A]T1 ]]$ is equivalent to $[[ [ll/A](G2, x : T1) ]]$ and
    similarly for $[[G']]$ and $[[T]]$ whence we have the required subtyping relationship from the application of \cref{lem:ctxt-sub-subtype}.
  \end{rneqncase}
\end{proof}

\begin{lemma}
  \label{lem:ectxt-sub-well-typed}
  If, for some $[[G]]$,
  $[[ Th | [] : T => G' | B |-e E : T'' => G'']]$ and $[[Th | G | B |- e : T => G' ]]$
  then
  $[[ Th | G | B |- E[e] : T'' => G'' ]]$.
\end{lemma}
\begin{proof}
  By induction on the typing derivation of $[[E]]$.
  \begin{rneqncase}{TE-Seq}{
      [[ E ]] = [[ E'; e' ]] \\ [[ E[e] = E'[e]; e' ]] \\
      [[ Th | [] : T => G' | B |-e E' : T0 => G0 ]] & [[ Th | G0 | B |- e' : T'' => G'' ]]
    }
    By the induction hypothesis we have $[[ Th | G | B |- E'[e] : T0 => G0 ]]$. Combined
    with the assumption $[[ Th | G0 | B |- e' : T'' => G'' ]]$ the result holds
    via application of the proof rule \rn{T-Seq}.
  \end{rneqncase}
  \begin{rncase}{TE-Hole}
    Trivial.
  \end{rncase}
\end{proof}

\begin{lemma}
  For any $[[G0]]$ such that $[[Th | G0 | B |- x: T => G]]$ and $[[ Th | [] : T => G | B |-e E[let y = [] l in e] : T' => G' ]]$ then
  $[[ Th | G0 | B |- E[let y = [] l in e][x] : T' => G' ]]$
\end{lemma}
\begin{proof}
  It suffices to show that $[[ Th | G0 | B |- let y = x in e : T1 => G1]]$
  and $[[ Th | [] : T1 => G1 | B |-e E : T' => G']]$
  whence the result will hold from \cref{lem:ectxt-sub-well-typed}.

  By inversion on
  $[[ Th | [] : T => G | B |-e E[let y = [] l in e] : T' => G' ]]$ and
  $[[ Th | G0 | B |- x : T => G]]$ we have that:
  \begin{align}
    & [[ Th | G, y: T | B |- e : T2 => G2 ]] \\
    & [[ Th | []: T2 => G2 \ y | B |-e E : T' => G' ]] \\
    & [[ B |- T2 => G2 \ y ]] \\
    & [[ G0(x) = T + T' ]] \\
    & [[ G = G0[x <- T'] ]]
  \end{align}
  We take $[[ G1 = G2 \ y ]]$, $[[ T2 = T1 ]]$. To show that
  $[[ Th | G0[x : T + T'] | B |- let y = x in e : T1 => G1 ]]$ it
  remains to show that
  $[[Th | G0[x <- T' /\ x x = y],y : T /\ y y = x | B |- e : T2 =>
  G2]]$ and that $[[ B |- T2 => G2 \ y]]$.
  The former follows from first weakening the types of $[[x]]$ and $[[y]]$ with \rn{T-Sub}
  and from assumption (1), and the latter follows from (3).
\end{proof}

\begin{lemma}
  For any $[[E]]$ and $[[e']]$ such that $[[E[e'] = e]]$ where
  $[[Th | G | B |- e : T => G']]$ there exists some $[[T0]]$, $[[G0]]$ such that
  $[[Th | []: T0 => G0 | B |-e E : T => G' ]]$ and
  $[[Th | G | B |- e' : T0 => G0]]$.
\end{lemma}
\begin{proof}
  By induction on the structure of $[[E]]$.
  \begin{rncase}{E-Hole}
    Trivial, by taking $[[T1 = T]]$ and $[[G' = G1]]$.
  \end{rncase}
  \begin{rncase}{E-Seq}
    Then $[[E = E'; e'']]$ and $[[E[e'] = E'[e']; e'' = e]]$, whence
    $[[e = e1; e2]]$ where $[[E'[e'] = e1]]$ and $[[e'' = e2]]$. By
    inversion on the typing derivation of $[[e]]$ we have
    $[[ Th | G | B |- e1 : T1 => G1]]$,
    $[[Th | G1 | B |- e2: T => G']]$. By the induction hypothesis
    we then have $[[ Th | G | B |- e' : T0 => G0 ]]$ and
    $[[ Th | []: T0 => G0 | B |-e E' : T1 => G1 ]]$. Exploiting the equality
    between $[[e2 = e'']]$, we use the proof rule \rn{TE-Seq}
    to conclude $[[ Th | []: T0 => G0 | B |-e E'; e'' : T => G']]$.
  \end{rncase}
\end{proof}

\begin{lemma}[Environment Weakening]
  \label{lem:tyenv-weaken}
  For any $[[G]]$ and $[[ G'' ]]$ such that $[[dom G sub dom G'']]$ and $[[ forall x in dom G.G(x) = G''(x)]]$.
  \begin{enumerate}
  \item $[[ G |- T1 <: T2 ==> G'' |- T1 <: T2 ]]$
  \item $[[G <: G' ==> G'' <: G''']]$ where $[[forall x in dom G'.G'''(x) = G'(x) /\ forall x not in dom G'.G'''(x) = G''(x)]]$.
  \item Let $[[ Th | G | B |- e : T => G' ]]$. Then $[[ Th | G'' | B |- e : T => G''']]$ where
    $[[G''' = G''[xi <- G'(xi)] ]]$ ($[[xi in G']]$).
  \end{enumerate}
\end{lemma}
\begin{proof}
  \begin{enumerate}
  \item As in the proof of \cref{lem:ctxt-sub-subtype}, at the root of
    the subtyping derivation is a logical judgment of the form
    $[[ |= [ G ] /\ ph1 ==> ph2 ]]$ which can be shown to be valid. We
    must then show that $[[ |= [ G'' ] /\ ph1 ==> ph2 ]]$ is valid. As
    $[[ [ G'' ] /\ ph1 ]]$ only strengthens the pre-condition
    $[[ [ G ] /\ ph1 ]]$, the $[[ |= [ G'' ] /\ ph1 ==> ph2 ]]$ must
    also be valid.
  \item It suffices to show that $[[G'' |- G''(x) <: G'''(x)]]$ for
    any arbitrary $[[x]]$. If $[[x in G']]$ then by we must have
    $[[ G |- G(x) = G''(x) <: G'''(x) = G'(x) ]]$, whence $[[ G'' |- G''(x) <: G'''(x) ]]$ from
    part 1.

    If $[[ x not in G' ]]$, then $[[empty |- G''(x) <: G'''(x)]]$ and the result holds
    again from part 1.
  \item By straightforward induction on the typing derivation of
    $[[ Th | G | B |- e : T => G' ]]$. The only interesting cases are
    \rn{T-Sub} and \rn{T-Assert}. \rn{T-Sub} follows from using parts
    1 and 2.  \rn{T-Assert} requires showing that
    $[[ |= [G''] ==> ph ]]$. As the source term was well typed,
    $[[ |= [G] ==> ph ]]$ is valid, and as $[[ [G''] ]]$ only
    strengthens the hypothesis $[[ [G] ]]$, $[[ |= [G''] ==> ph]]$ must
    also be valid.
  \end{enumerate}
\end{proof}

\begin{lemma}
  Let $[[ E[let x = f l (y1,,yn) in e] ]]$ be a term in a program
  $[[ <D, e> ]]$ such that:

  \begin{bcpcasearray}
    [[ Th | G0 | ll |- let x = f l (y1,,yn) in e : T1 => G1 ]] &  [[ csub = [l:ll/A] ]] \\
    [[ Th | [] : T1 => G1 | ll |-e E : T2 => G2 ]] & [[ vsub = [y1/x1],,[yn/xn] ]] \\
    [[ f |-> ( x1, .. ,xn) e' in D]] & [[ Th |- f |-> (x1,..,xn) e ]] \\
  \end{bcpcasearray}

  where $[[Th(f) = A < x1 : T1 ,, xn: Tn> -> <x1: T1',,xn:Tn' | Tp >]]$.

  Then: \begin{align*}
    & [[ Th | G0 | l:ll |- vsub e : csub vsub Tp => G0[yi <- csub vsub Ti'] ]] \\
    & [[ Th | [] : csub vsub Tp => G0[yi <- csub vsub Ti] | ll |-e E[let x = [] l in e] : T2 => G2 ]]
  \end{align*}
\end{lemma}
\begin{proof}
  To prove the first part, from the well-typing of the function body, we have
  $[[ Th | x1:T1,,xn:Tn | A |- e : Tp => x1:T1',,xn:Tn' ]]$.
  By $n$ applications of the substitution lemma we have:
  $[[ Th | y1:vsub T1,,yn:vsub Tn | A |- vsub e : vsub Tp => y1:vsub T1',,yn:vsub Tn']]$.
  By \cref{lem:ctxt-subst-well-typed} we then have
  $[[ Th | y1:csub vsub T1,,yn:csub vsub Tn | l:ll |- vsub e : csub vsub Tp => y1:csub vsub T1',,yn:csub vsub Tn']]$.
  By \cref{lem:tyenv-weaken} and the well-typing of the function call we have
  $[[ Th | G0 | l:ll |- vsub e : csub vsub Tp => G0[yi <- csub vsub Ti ] ]]$ as required.

  The second part follows immeidately by inversion on the typing of
  $[[E]]$ and $[[let x = f l (y1,,yn) in e ]]$.
\end{proof}
\section{TODO}

\begin{itemize}
\item Running example.
\item Context-Sensitiveness example. (Look at the JayHorn paper and Naoki's note.)
\item Some missing definitions, especially $\Gamma \models \varphi$.  (This can be done by reading previous work about refinement-type based static verification.  Ask Atsushi or Naoki which paper to look at.)
\item Soundness statement.
\item Extension to "general" references: e.g., $\set{r : \TINT \mid \varphi} \TREF^1 \TREF^1 \TREF^1$ or $\mu\alpha. \set{r : \TINT \mid \varphi} \TREF^1$.
\item Inference (constraint generation) algorithm.
\item Experiments?
\end{itemize}

\newcommand\DOM{\textit{dom}}
\newcommand\EXTEND[1]{\{{#1}\}}

\begin{figure}
  \leavevmode
  \infrule[TE-Seq]{
    [[ Th | [] : T => G | B |-e E : T' => G' ]] \andalso
    [[ Th | G' | B |- e : T'' => G'' ]]
  }{
    [[ Th | [] : T => G | B |-e E; e : T'' => G'' ]]
  }
  \infrule[TE-Hole]{}{
    [[ Th | [] : T => G | B |-e [] : T => G ]]
  }
  \infrule[TE-Stack]{
    [[ Th | [] : T' => G' | B |-e E : T'' => G'']] \\
    [[ Th | G, x : T | B |- e : T' => G0 ]] \\
    [[ G' = G0 \ x ]] \andalso [[ B |- T' => G0 \ x ]]
  }{
    [[ Th | [] : T => G | B |-e E[let x = [] l in e] : T'' => G'' ]]
  }

  \begin{align*}
    [[ (E; e)[e'] ]] & = [[ E[e']; e ]] \\
    [[ [][e'] ]] & = e' \\
    [[ E[let y = [] l in e][x] ]] & = [[ E[let y = x in e] ]]
  \end{align*}
\caption{Context typing and substitution}
\label{fig:context-typing}
\end{figure}

\begin{figure}
  \leavevmode
  \infrule[]{
    [[ll = Trace(Es)]] \andalso [[ Th |- D ]] \andalso \forall j \in \set{0..n-1}.\seq{\ell_j} = tail^{n-j+1}([[ll]]) \\
    [[ Cons(H, R, G) ]] \andalso
    \forall i\in\set{1..n}.[[ Th | [] : Ti => Gi | lli-1 |-e Ei-1 : Ti-1 => Gi-1 ]] \\
    [[ Th | [] : T => G' | ll |-e En : Tn => Gn ]] \\
    [[ Th | G | ll |- e : T => G' ]]
  }{
    [[ |- D <H,R,Es,En[e]> ]]
  }

  \begin{align*}
    [[Trace(.) = .]] && [[Trace(E[let x = [] l in e] : Es) = l : Trace(Es)]])
  \end{align*}

  \begin{align*}
    [[Cons(H,R,G)]] = & [[SAT(H,R,G)]] \wedge [[a in H]].[[F(a)]] \leq 1 \\
    [[SAT(H,R,G)]] = & [[ forall x in G.x in R]]\wedge \\
    & \begin{cases}
      [[R(x)]] \in \mathbb{Z} \wedge [[ [R;R(x)/y]ph ]] & [[ G(x) = {y:int | ph} ]] \\
      [[r > 0]] \produces & [[ G(x) =  { y:int | ph } ref r ]] \\
      \,\,\, [[H(R(x))]] \in \mathbb{Z} \wedge [[ [R; H(R(x))/y]ph]] &
    \end{cases} \\
    [[ [empty; v / x]ph ]] & = [[ [v/x]ph ]] \\
    [[ [R { y |-> v' }; v / x]ph ]] & =  [[ [v'/y] [R ; v / x]ph ]] \\
    F = &  \Sigma_{[[ x in G ]]}\,[[own(H,R(x),G(x))]] \\
    [[own(H,v,T)]] &  = \begin{cases}
      [[ { a |-> r } ]] & [[v = a /\ a in H /\ T = T' ref r ]] \\
      \emptyset & o.w.
    \end{cases} \\
  \end{align*}
\caption{Machine state typing}
\label{fig:state-typing}
\end{figure}

%edit by shiki
\begin{figure}[t]
  \leavevmode
  \infrule[]{
  }{
    [[ <H, R, CE : Es, E[x]> --> D <H, R, Es, CE[x]> ]]
   }
   \infrule[]{
   }{
     [[ <H, R, CE : Es, E[x; e]> --> D <H, R, Es, E[e]> ]]
  }
  \infrule[]{
    [[ x' fresh in R ]]
  }{
    [[<H, R, Es, E[let x = y in e]> --> D <H, R { x' |-> R(y)}, Es, E[ [x'/x]e]> ]]
  }
  \infrule[]{
    [[ x' fresh in R ]]
  }{
    [[ <H,R,Es,E[let x = nn in e]> --> D <H,R { x' |-> nn},Es, E[ [x'/x]e]>]]
  }
  \infrule[]{
    [[ R(x) = 0 ]]
  }{
    [[ <H, R, Es, E[ifz x then e1 else e2]> --> D <H, R, Es, E[e1]> ]]
  }
  \infrule[]{
    [[ R(x) != 0 ]]
  }{
    [[ <H, R, Es, E[ifz x then e1 else e2]> --> D <H, R, Es, E[e2]> ]]
  }
  \infrule[]{
    [[ a fresh in H ]] \andalso [[ x' fresh in R ]]
  }{
    [[ <H, R, Es, E[let x = mkref y in e]> --> D <H { a |-> R(y) }, R { x' |-> a }, Es, E[ [x'/x]e]> ]]
  }
  \infrule[]{
    [[ R(y) = a ]] \andalso [[ H(a) = v ]] \andalso [[ x' fresh in R ]]
  }{
    [[ <H, R, Es, E[let x = *y in e]> --> D <H, R { x' |-> v }, Es, E[ [x'/x]e]> ]]
  }
  \infrule[]{
    [[ f |-> (x1,..,xn) e in D ]]
  }{
    [[ <H, R, Es, E[let x = f l (y1,,yn) in e']> --> D <H, R, E[let x = [] l in e'] : Es, [y1/x1] ,, [yn/xn] e> ]]
  }
  \infrule[]{
    [[ R(x) = a ]] \andalso [[ a in H ]]
  }{
    [[ <H, R, Es, E[x:=y;e]> --> D <H { a <- R(y) }, R, Es, E[e]> ]]
  }
  \infrule[]{
    R(x) = R(y)
  }{
    [[ <H, R, Es, E[alias(x = y); e]> --> D <H, R, Es, E[e]> ]]
  }
  \infrule[]{
    [[R(x) != R(y)]]
  }{
    [[ <H, R, Es, E[alias(x = y); e]> --> D AliasFail ]]
  }
  \infrule[]{
    [[ R |= ph ]]
  }{
    [[ <H, R, Es, E[assert(ph); e]> --> D <H, R, Es, E[e]> ]]
  }
  \infrule[]{
    [[ R !|= ph ]]
  }{
    [[ <H, R, Es, E[assert(ph); e]> --> D AssertFail ]]
  }
\caption{Transition Rules.}
\label{fig:transitionRules}
\end{figure}



\bibliographystyle{plain}
\bibliography{main.bib}

\end{document}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: t
%%% End:
